import { Component, inject, OnInit } from '@angular/core';
import { LightHouseApiService } from '../../services/lighthouse-api.service';
import { DashboardStaticDataService } from '../../services/dashboard-static-data.service';
import { TransformationsStaticDataService } from '../../services/transformations-static-data.service';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    CommonModule,
    AngularSplitModule,
    PantherComponentsBootstrapModule,
    PantherComponentsCommonModule,
  ],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  public display: boolean = false;
  public showJiraldsPopup: boolean = false;
  public showUpstreamLineagePopup: boolean = false;
  public isTransformationPopUpVisible: boolean = false;

  public dashboardGridColumns = [];
  public dashboardGridVisibleColumns = [];
  public dashboardGridData = [];
  public transformationGridColumns = [];
  public transformationGridVisibleColumns = [];
  public transformationGridData = [];
  public transformationDetails: any[] | null = null;
  public transformationDetailsButtonDisabled = true;

  private readonly dashboardStaticData = inject(DashboardStaticDataService);
  private readonly transformationStaticData = inject(
    TransformationsStaticDataService
  );
  private readonly httpApiService = inject(LightHouseApiService);

  ngOnInit(): void {
    this.dashboardGridColumns = this.dashboardStaticData.dashboardGridMetaData;
    this.dashboardGridVisibleColumns = this.dashboardStaticData.dashboardGridVisibleColumns;
    this.getDashboardGridData();
    this.transformationGridColumns =
      this.transformationStaticData.transformationsGridMetaData;
    this.transformationGridVisibleColumns =
      this.transformationStaticData.transformationsGridVisibleColumns;
    this.getTransformationGridData();
  }

  getDashboardGridData(): void {
    this.httpApiService.fetchFlattenFieldData().subscribe((res) => {
      this.dashboardGridData = Object.values(res);
    });
  }

  getTransformationGridData(): void {
    this.httpApiService.fetchTransformationDependentsData().subscribe((res) => {
      this.transformationGridData = Object.values(res);
    });
  }

  onDetailsButtonClick(): void {
    if (this.transformationDetailsButtonDisabled) return;
    if (
      Array.isArray(this.transformationGridSelectedItems) &&
      this.transformationGridSelectedItems.length > 0
    ) {
      this.transformationDetails = this.transformationGridSelectedItems;
      this.isTransformationPopUpVisible = true;
    }
  }

  closePopup(): void {
    this.isTransformationPopUpVisible = false;
    this.transformationDetails = null;
  }

  openJiraldsPopup(): void {
    this.showJiraldsPopup = true;
  }

  closeJiraIdsPopup(): void {
    this.showJiraldsPopup = false;
  }

  openUpstreamLineagePopup(): void {
    this.showUpstreamLineagePopup = true;
  }

  closeUpstreamLineagePopup(): void {
    this.showUpstreamLineagePopup = false;
  }
}



<main class="dashboard-div">
  <div class="master-list-panel">
    <as-split direction="vertical">
      <as-split-area [size]="70">
        <div class="upper col-md-10">
          <app-grid
            gridId="dashboard-grid"
            [columns]="dashboardGridColumns"
            [visibleColumnsList]="dashboardGridVisibleColumns"
            [reloadData]="true"
            (dataLoadCompleted)="onDashBoardGridDataLoadCompleted($event)"
            [dataProvider]="dashboardGridData"
          ></app-grid>
        </div>
        <div class="col-md-12">
          <button (click)="openJiraldsPopup()">Jira Details</button>
          <button (click)="openUpstreamLineagePopup()">Upstream Lineage</button>
        </div>
      </as-split-area>
      <as-split-area [size]="30">
        <div class="splitter-panel">
          <p>Transformations</p>
        </div>
        <div class="lower col-md-10">
          <app-grid
            gridId="transformation-grid"
            [columns]="transformationGridColumns"
            [visibleColumnsList]="transformationGridVisibleColumns"
            [reloadData]="true"
            (dataLoadCompleted)="onTransformationGridDataLoadCompleted($event)"
            [dataProvider]="transformationGridData"
            (selectionChange)="onTransformationGridSelection($event)"
          ></app-grid>
        </div>
        <div>
          <button
            (click)="onDetailsButtonClick()"
            [disabled]="transformationDetailsButtonDisabled"
            class="details-button"
          >
            Details
          </button>
        </div>
      </as-split-area>
    </as-split>

    <!-- Jira IDs Popup -->
    <panther-dialog
      header="Jira Details"
      [(visible)]="showJiraldsPopup"
      [modal]="true"
      [responsive]="true"
      [width]="350"
      [minY]="70"
      [maximizable]="true"
      [baseZIndex]="10000"
      [minWidth]="200"
    >
      <div dialog-content>
        <app-jira-details (onCloseClick)="closeJiraIdsPopup()"></app-jira-details>
      </div>
    </panther-dialog>

    <!-- Upstream Lineage Popup -->
    <panther-dialog
      header="Upstream Lineage"
      [(visible)]="showUpstreamLineagePopup"
      [modal]="true"
      [responsive]="true"
      [width]="350"
      [minY]="70"
      [maximizable]="true"
      [baseZIndex]="10000"
      [minWidth]="200"
    >
      <div dialog-content>
        <app-upstream-lineage-popup (onCloseClick)="closeUpstreamLineagePopup()"></app-upstream-lineage-popup>
      </div>
    </panther-dialog>

    <!-- Transformations Popup -->
    <panther-dialog
      header="Transformations Details"
      [(visible)]="isTransformationPopUpVisible"
      [modal]="true"
      [responsive]="true"
      [width]="350"
      [minY]="70"
      [maximizable]="true"
      [baseZIndex]="10000"
      [minWidth]="200"
    >
      <div dialog-content>
        <transformations
          [transformationDetails]="transformationDetails"
          (onCloseClick)="closePopup()"
        ></transformations>
      </div>
    </panther-dialog>
  </div>
</main>
