from flask import Blueprint, request, jsonify, render_template
import subprocess
import datetime
import os

# Define Blueprint
handle_routes = Blueprint('handle_routes', __name__)

# Define the GET route
@handle_routes.route('/system/recon/replay', methods=['GET'])
def replay_system():
    try:
        # Return HTML file for /system/recon/replay
        with open(os.path.join(os.path.dirname(__file__), 'templates', 'index.html'), 'r') as file:
            return file.read(), 200
    except Exception as e:
        return str(e), 404

# Define the POST route
@handle_routes.route('/system/recon/replay', methods=['POST'])
def recon_data():
    now = datetime.datetime.now()
    print("Recon Automation Framework :: Recon Data Loading Started :: ", now.strftime("%Y-%m-%d %H:%M:%S"))

    content_len = int(request.headers.get('Content-Length', 0))
    post_body = request.data.decode('utf-8')
    
    # Simulate getting data from form submission
    fields = dict(urlparse.parse_qs(post_body))
    
    asset_class = str(fields.get('assetClass', [''])[0]).strip('[]').replace("1", "'")
    jurisdiction = str(fields.get('jurisdiction', [''])[0]).strip('[]').replace("’", "")
    recon_type = str(fields.get('recondate', [''])[0]).strip('[]').replace("’", "")
    flow_type = str(fields.get('flowType', [''])[0]).strip('[]').replace("’", "")
    
    # Run the respective shell script based on the flow type
    response = ""
    if flow_type.lower() == "onereg":
        try:
            result = subprocess.check_output(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction} {recon_type}",
                shell=True
            )
            response = "Request Process Successfully: OneReg Loading"
        except subprocess.CalledProcessError as e:
            response = f"Request Process Failed: OneReg Loading. Error: {e.output}"
    
    elif flow_type.lower() == "file":
        try:
            result = subprocess.check_call(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction} {recon_type}",
                shell=True
            )
            response = "Request Process Successfully: File Loading"
        except subprocess.CalledProcessError as e:
            response = f"Request Process Failed: File Loading. Error: {e.output}"
    else:
        response = "Request Process Failed: Invalid Flow Type"
    
    enow = datetime.datetime.now()
    print("Recon Automation Framework :: Recon Data Loading Ended :: ", enow.strftime("%Y-%m-%d %H:%M:%S"))

    return jsonify({'response': response}), 200





from flask import Flask
from .routes import handle_routes

def create_app():
    app = Flask(__name__)
    # Register the blueprint
    app.register_blueprint(handle_routes)
    return app



from recon_automation import create_app

# Create the Flask app
app = create_app()

if __name__ == "__main__":
    # Run the app on port 5000
    app.run(host="0.0.0.0", port=5000)
