import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Adjust the path as necessary

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  @Output() filteredDataEmitter = new EventEmitter<any[]>(); // EventEmitter to emit filtered data

  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  selectedDate: string = '';

  filteredResults: any[] = []; // To hold the filtered data results

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';
  private apiUrl = 'http://1234.234:8080/fightfox/transformationFieldData'; // Replace with the correct API URL

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      // Your existing code to map the data
    });
  }

  searchFilters(): void {
    const payload = {
      selectedDate: this.selectedDate,
      selectedRegulations: this.selectedRegulations.map(option => option.name),
      selectedReportableDatasets: this.selectedReportableDatasets.map(option => option.name),
      selectedReportableFields: this.selectedReportableFields.map(option => option.name),
      selectedAssetClasses: this.selectedAssetClasses.map(option => option.name),
      selectedProductType: this.selectedProductType.map(option => option.name)
    };

    console.log('Search Payload:', payload);

    // API call with search filters
    this.http.post<any[]>(this.apiUrl, payload).subscribe(
      (response) => {
        let filteredData = response;
        
        // Apply filtering logic
        if (this.selectedRegulations.length > 0 && this.selectedRegulations[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedRegulations.some(reg => reg.name === item.regulationName));
        }
        if (this.selectedAssetClasses.length > 0 && this.selectedAssetClasses[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedAssetClasses.some(ac => ac.name === item.assetclass));
        }
        if (this.selectedProductType.length > 0 && this.selectedProductType[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedProductType.some(pt => pt.name === item.productType));
        }
        if (this.selectedReportableDatasets.length > 0 && this.selectedReportableDatasets[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedReportableDatasets.some(ds => ds.name === item.messageType));
        }

        this.filteredResults = filteredData;

        // Emit the filtered data to the parent component (Dashboard)
        this.filteredDataEmitter.emit(this.filteredResults);

        console.log('Filtered Data:', this.filteredResults);
      },
      (error) => {
        console.error('Error fetching filtered data:', error);
      }
    );
  }
}



import { Component, inject, OnInit } from '@angular/core';
import { GridComponent } from '../../../common/components/grid/grid.component';
import { DashboardStaticDataService } from '../services/dashboard-static-data.service';
import { TransformationsStaticDataService } from '../services/transformations-static-data.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  private readonly dashboardStaticData = inject(DashboardStaticDataService);
  private readonly transformationStaticData = inject(TransformationsStaticDataService);

  public dashboardGridColumns = []; // Define the grid columns
  public dashboardGridVisibleColumns: string[] = [];
  public dashboardGridData: any[] = [];

  constructor() {}

  ngOnInit(): void {
    this.initializeGridData(); // Load initial grid data
  }

  initializeGridData(): void {
    // Populate with initial static data
    this.dashboardGridData = this.dashboardStaticData.dashboardGridStaticData;
  }

  // Method to handle the filtered data from FiltersPanelComponent
  onFilteredDataReceived(filteredData: any[]): void {
    this.dashboardGridData = filteredData; // Update grid data with filtered results
    console.log('Updated Grid Data:', this.dashboardGridData);
  }
}



<app-filters-panel (filteredDataEmitter)="onFilteredDataReceived($event)"></app-filters-panel>

<!-- Grid to display the data -->
<app-grid [columns]="dashboardGridColumns" [data]="dashboardGridData">
</app-grid>
