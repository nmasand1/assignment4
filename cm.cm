import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Assuming you have this interface

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';
  private apiUrl = 'http://1234.234:8080/fightfox/transformationFieldData'; // Replace with actual URL

  apiData: any[] = []; // Holds the data fetched from the API

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableDatasets = data.data.reportableDatasets.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableFields = data.data.reportableFields.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));
    });
  }

  // Fetch data from the API and apply filters
  searchFilters(): void {
    this.http.get<any[]>(this.apiUrl).subscribe((data) => {
      this.apiData = data; // Store API data

      // Apply filters to the fetched data
      const filteredData = this.apiData.filter(item => {
        const isProductTypeMatch = this.selectedProductType.length === 0 || this.selectedProductType.some(p => p.name === item.producttype);
        const isAssetClassMatch = this.selectedAssetClasses.length === 0 || this.selectedAssetClasses.some(a => a.name === item.assetclass);

        // You can add additional filters for reportableDatasets, reportableFields, etc.
        
        return isProductTypeMatch && isAssetClassMatch;
      });

      // Log the filtered data to the console (you can display it on the UI if required)
      console.log('Filtered Data:', filteredData);
    });
  }

  // Reset functionality: Clear all selected filters
  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    
    // Reset the selected state in the options array too
    this.regulations.forEach((option) => (option.selected = false));
    this.reportableDatasets.forEach((option) => (option.selected = false));
    this.reportableFields.forEach((option) => (option.selected = false));
    this.assetClasses.forEach((option) => (option.selected = false));
    this.productType.forEach((option) => (option.selected = false));

    console.log('Filters reset');
  }

  // Event handlers for when selections change in the MultiSelect components
  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}





<div class="filters-panel">
  <app-multi-select
    [options]="regulations"
    [label]="'Regulations'"
    (selectionChange)="onRegulationsChange($event)"
  ></app-multi-select>

  <app-multi-select
    [options]="reportableDatasets"
    [label]="'Reportable Datasets'"
    (selectionChange)="onReportableDatasetsChange($event)"
  ></app-multi-select>

  <app-multi-select
    [options]="reportableFields"
    [label]="'Reportable Fields'"
    (selectionChange)="onReportableFieldsChange($event)"
  ></app-multi-select>

  <app-multi-select
    [options]="assetClasses"
    [label]="'Asset Classes'"
    (selectionChange)="onAssetClassesChange($event)"
  ></app-multi-select>

  <app-multi-select
    [options]="productType"
    [label]="'Product Types'"
    (selectionChange)="onProductTypeChange($event)"
  ></app-multi-select>

  <!-- Add date selection input -->
  <input type="date" [(ngModel)]="selectedDate">

  <button (click)="searchFilters()">Search</button>
  <button (click)="resetFilters()">Reset</button>
</div>

