import { Component, OnInit } from '@angular/core';
import { LightHouseApiService } from 'src/app/services/lighthouse-api.service'; // Adjust the path as necessary
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Adjust the path for your interface

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  selectedDate: string = '';

  filteredResults: any[] = []; // To hold the filtered data results

  constructor(private lightHouseApiService: LightHouseApiService) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    // Fetch filter metadata from the service
    this.lightHouseApiService.getFiltersMetaData().subscribe(
      (response) => {
        // Ensure to match the API response structure
        this.regulations = response.data.regulations.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.reportableDatasets = response.data.reportableDatasets.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.reportableFields = response.data.reportableFields.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.assetClasses = response.data.assetClasses.map((item: any) => ({
          id: item.id,
          name: item.assetclass,
          displayName: item.assetclass,
          selected: false,
        }));

        this.productType = response.data.productType.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.name,
          selected: false,
        }));
      },
      (error) => {
        console.error('Error fetching filters data:', error);
      }
    );
  }

  // Trigger search API call with selected filters
  searchFilters(): void {
    const payload = {
      selectedDate: this.selectedDate,
      selectedRegulations: this.selectedRegulations.map(option => option.name),
      selectedReportableDatasets: this.selectedReportableDatasets.map(option => option.name),
      selectedReportableFields: this.selectedReportableFields.map(option => option.name),
      selectedAssetClasses: this.selectedAssetClasses.map(option => option.name),
      selectedProductType: this.selectedProductType.map(option => option.name),
    };

    // Call the fetchFlattenFieldData method in the LightHouseApiService
    this.lightHouseApiService.fetchFlattenFieldData(payload).subscribe(
      (response) => {
        this.filteredResults = response; // Adjust this if necessary based on the response structure
        console.log('Filtered Data:', this.filteredResults);
      },
      (error) => {
        console.error('Error fetching filtered results:', error);
      }
    );
  }

  // Reset selected filters and clear the results
  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    this.selectedDate = '';
    this.filteredResults = []; // Clear filtered results
  }

  // Event Handlers for filter selection
  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}
