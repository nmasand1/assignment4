@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    asset_class = request.form['assetClass']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Process multiple jurisdictions
    jurisdictions = request.form.getlist('jurisdiction') if flow_type == "onereg" else [request.form['jurisdiction']]
    jurisdiction_str = ",".join(jurisdictions)

    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template_string(
            HTML_TEMPLATE,
            asset_classes=["FX", "IR", "EQ", "Co", "CD"],
            jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
            recon_types=["COMP", "POS"],
            response="Invalid Date Format. Please use YYYY-MM-DD.",
            file_paths=[]
        )

    try:
        # Prepare the shell command
        if flow_type.lower() == "onereg":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        elif flow_type.lower() == "file":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        else:
            return render_template_string(
                HTML_TEMPLATE,
                asset_classes=["FX", "IR", "EQ", "Co", "CD"],
                jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
                recon_types=["COMP", "POS"],
                response="Invalid Flow Type",
                file_paths=[]
            )

        # Run the shell command and capture output
        result = subprocess.run(
            cmd, shell=True, text=True, capture_output=True
        )
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output}\n{command_error}".strip()

        if result.returncode == 0:
            response = f"Request Processed Successfully:<br>{full_output.replace('\n', '<br>')}"
        else:
            response = f"Request Failed (Error Code: {result.returncode}):<br>{full_output.replace('\n', '<br>')}"

        print(f"Command Output:\n{command_output}")
        print(f"Command Error:\n{command_error}")

    except Exception as e:
        response = f"Request Failed: {str(e)}"
        print(f"Exception Occurred: {str(e)}")

    enow = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")

    asset_classes = ["FX", "IR", "EQ", "Co", "CD"]
    file_paths = []
    for asset_class in asset_classes:
        for recon_type in ["cmp", "posval"]:
            directory = os.path.join(BASE_DIR, asset_class, "data", recon_type)
            if os.path.exists(directory):
                files = os.listdir(directory)
                for file in files:
                    relative_path = os.path.relpath(directory, BASE_DIR)
                    file_paths.append((file, relative_path))

    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=["FX", "IR", "EQ", "Co", "CD"],
        jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
        recon_types=["COMP", "POS"],
        response=response,
        file_paths=file_paths
    )





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recon Automation Framework</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        form {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-top: 10px;
            font-weight: bold;
        }
        select, input[type="date"], input[type="submit"] {
            margin-top: 5px;
            padding: 5px;
            font-size: 14px;
        }
        .checkbox-group label {
            font-weight: normal;
            display: block;
        }
        #jurisdiction-checkbox-container {
            margin-top: 10px;
        }
        .response {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
        }
        .file-list {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }
    </style>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const flowTypeSelect = document.getElementById("flowType");
            const jurisdictionSelect = document.getElementById("jurisdiction");
            const jurisdictionCheckboxContainer = document.getElementById("jurisdiction-checkbox-container");

            // Toggle between dropdown and checkboxes based on flowType
            flowTypeSelect.addEventListener("change", () => {
                if (flowTypeSelect.value === "onereg") {
                    jurisdictionSelect.style.display = "none";
                    jurisdictionCheckboxContainer.style.display = "block";
                } else {
                    jurisdictionSelect.style.display = "block";
                    jurisdictionCheckboxContainer.style.display = "none";
                }
            });
        });
    </script>
</head>
<body>
    <h1>Recon Automation Framework</h1>
    <form action="/recon" method="POST">
        <label for="assetClass">Asset Class:</label>
        <select id="assetClass" name="assetClass" required>
            {% for asset_class in asset_classes %}
                <option value="{{ asset_class }}">{{ asset_class }}</option>
            {% endfor %}
        </select>

        <label for="reconType">Recon Type:</label>
        <select id="reconType" name="reconType" required>
            {% for recon_type in recon_types %}
                <option value="{{ recon_type }}">{{ recon_type }}</option>
            {% endfor %}
        </select>

        <label for="reconDate">Recon Date:</label>
        <input type="date" id="reconDate" name="reconDate" required>

        <label for="flowType">Flow Type:</label>
        <select id="flowType" name="flowType" required>
            <option value="file">File</option>
            <option value="onereg">OneReg</option>
        </select>

        <!-- Dropdown for jurisdiction -->
        <div id="jurisdiction-dropdown">
            <label for="jurisdiction">Jurisdiction:</label>
            <select id="jurisdiction" name="jurisdiction" required>
                {% for jurisdiction in jurisdictions %}
                    <option value="{{ jurisdiction }}">{{ jurisdiction }}</option>
                {% endfor %}
            </select>
        </div>

        <!-- Checkboxes for jurisdiction -->
        <div id="jurisdiction-checkbox-container" style="display: none;">
            <label>Jurisdiction:</label>
            <div class="checkbox-group">
                {% for jurisdiction in jurisdictions %}
                    <label>
                        <input type="checkbox" name="jurisdiction" value="{{ jurisdiction }}"> {{ jurisdiction }}
                    </label>
                {% endfor %}
            </div>
        </div>

        <input type="submit" value="Submit">
    </form>

    <div class="response">
        <h2>Response:</h2>
        <p>{{ response|safe }}</p>
    </div>

    <div class="file-list">
        <h2>Generated Files:</h2>
        <ul>
            {% for file, path in file_paths %}
                <li><strong>{{ file }}</strong>: {{ path }}</li>
            {% endfor %}
        </ul>
    </div>
</body>
</html>
