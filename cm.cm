@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Extract form inputs
    asset_class = request.form.get('assetClass')
    recon_type = request.form.get('reconType')
    recon_date = request.form.get('reconDate')
    flow_type = request.form.get('flowType')

    # Debug: Log received jurisdictions
    print(f"Flow Type: {flow_type}")
    print(f"Received Jurisdictions: {request.form.getlist('jurisdiction')}")

    # Process jurisdictions based on flow type
    jurisdictions = (
        request.form.getlist('jurisdiction')  # Multiple jurisdictions
        if flow_type.lower() == "onereg" 
        else [request.form.get('jurisdiction')]  # Single jurisdiction
    )
    
    # Ensure jurisdictions are valid
    if not jurisdictions or any(not j for j in jurisdictions):
        return "Error: Invalid jurisdictions received.", 400

    jurisdiction_str = ",".join(jurisdictions)
    print(f"Processed Jurisdiction String: {jurisdiction_str}")

    try:
        # Format recon date
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return "Error: Invalid Date Format. Please use YYYY-MM-DD.", 400

    try:
        # Prepare the shell command
        if flow_type.lower() == "onereg":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        elif flow_type.lower() == "file":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        else:
            return "Error: Invalid Flow Type.", 400

        # Debug: Log the shell command
        print(f"Executing Command: {cmd}")

        # Run the shell command
        result = subprocess.run(cmd, shell=True, text=True, capture_output=True)
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output}\n{command_error}".strip()

        # Handle command result
        if result.returncode == 0:
            response = f"Request Processed Successfully:<br>{full_output.replace('\n', '<br>')}"
        else:
            response = f"Request Failed (Error Code: {result.returncode}): <br>{full_output.replace('\n', '<br>')}"
        
        print(f"Command Output:\n{command_output}")
        print(f"Command Error:\n{command_error}")
    except Exception as e:
        response = f"Request Failed: {str(e)}"
        print(f"Exception Occurred: {str(e)}")

    enow = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")

    return response
