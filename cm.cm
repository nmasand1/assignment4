import { Component, inject, OnInit } from '@angular/core';
import { GridComponent } from '../../common/components/grid/grid.component';
import { DashboardGridHelper } from '../../util/dashboard-grid-helper';
import { GridColumns, PartialBy } from '../../common/components/grid/grid-columns';
import { DashboardStaticDataService } from '../../services/dashboard-static-data.service';
import { TransformationsStaticDataService } from '../../services/transformations-static-data.service';
import { DataLoadCompletedEvent } from '../../common/components/grid/events/data-load-completed-event';
import { LightHouseApiService } from '../../services/lighthouse-api.service';
import { SelectionChangeEvent } from '../../common/components/grid/events/selection-change-event';
import { AngularSplitModule } from 'angular-split';
import { TransformationsComponent } from '../transformations/transformations.component';
import { JiraDetailsComponent } from './jira-details/jira-details.component';
import { UpstreamLineageComponent } from '../upstream-lineage-popup/upstream-lineage-popup.component';
import { PantherComponentsBootstrapModule, PantherComponentsCommonModule } from 'some-panther-library';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    GridComponent,
    AngularSplitModule,
    TransformationsComponent,
    JiraDetailsComponent,
    UpstreamLineageComponent,
    PantherComponentsBootstrapModule,
    PantherComponentsCommonModule,
  ],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  private readonly dashboardStaticData = inject(DashboardStaticDataService);
  private readonly transformationStaticData = inject(TransformationsStaticDataService);

  public displayJiraPopup: boolean = false;
  public displayUpstreamLineagePopup: boolean = false;
  public displayTransformationPopup: boolean = false;

  public dashboardGridColumns: PartialBy<GridColumns, 'propertyObject'>[] = [];
  public dashboardGridVisibleColumns: string[] = [];
  public dashboardGridData: any[] = [];
  public transformationGridColumns: PartialBy<GridColumns, 'propertyObject'>[] = [];
  public transformationGridVisibleColumns: string[] = [];
  public transformationGridData: any[] = [];
  public transformationGridSelectedItems: any[] = [];
  public transformationDetails: any | null = null;
  public transformationDetailsButtonDisabled: boolean = true;

  constructor(private httpApiService: LightHouseApiService) {}

  ngOnInit(): void {
    this.dashboardGridColumns = this.dashboardStaticData.dashboardGridMetaData;
    this.dashboardGridVisibleColumns = this.dashboardStaticData.dashboardGridVisibleColumns;
    this.getDashboardGridData();

    this.transformationGridColumns = this.transformationStaticData.transformationsGridMetaData;
    this.transformationGridVisibleColumns = this.transformationStaticData.transformationsGridVisibleColumns;
    this.getTransformationGridData();
  }

  getDashboardGridData(): void {
    this.httpApiService.fetchFlattenFieldData().subscribe((res) => {
      this.dashboardGridData = Object.values(res);
    });
  }

  getTransformationGridData(): void {
    this.httpApiService.fetchTransformationDependentsData().subscribe((res) => {
      this.transformationGridData = Object.values(res);
    });
  }

  onDashBoardGridDataLoadCompleted(event: DataLoadCompletedEvent): void {
    if (event.eventData) {
      window.parent[event.eventData.gridId] = event.eventData.gridComponent;
    }
  }

  onTransformationGridDataLoadCompleted(event: DataLoadCompletedEvent): void {
    if (event.eventData) {
      window.parent[event.eventData.gridId] = event.eventData.gridComponent;
    }
  }

  onTransformationGridSelection(event: SelectionChangeEvent): void {
    if (event.eventData && event.eventData.length > 0) {
      this.transformationDetailsButtonDisabled = false;
      this.transformationGridSelectedItems = event.eventData;
    } else {
      this.transformationDetailsButtonDisabled = true;
      this.transformationGridSelectedItems = [];
    }
  }

  openJiraPopup(): void {
    this.displayJiraPopup = true;
  }

  closeJiraPopup(): void {
    this.displayJiraPopup = false;
  }

  openUpstreamLineagePopup(): void {
    this.displayUpstreamLineagePopup = true;
  }

  closeUpstreamLineagePopup(): void {
    this.displayUpstreamLineagePopup = false;
  }

  openTransformationPopup(): void {
    if (this.transformationDetailsButtonDisabled) return;
    this.transformationDetails = this.transformationGridSelectedItems;
    this.displayTransformationPopup = true;
  }

  closeTransformationPopup(): void {
    this.displayTransformationPopup = false;
    this.transformationDetails = null;
  }
}
