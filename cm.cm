from flask import Flask, request, render_template
import subprocess
import datetime

app = Flask(__name__)

# Jurisdiction shortform mapping
JURISDICTION_SHORTFORMS = {
    "JFSA": "na",
    "CANADA": "canada",
    "CFTC": "cftc",
    "SEC": "sec",
    "HKMA": "hkma",
    "ESMA": "esma",
    "HKTR": "hktr",
    "FCA": "fca",
    "MAS": "mas",
    "ASIC": "asic",
}

@app.route('/', methods=['GET'])
def home():
    asset_classes = ['FX', 'IR', 'EQ', 'CO', 'CD']
    jurisdictions = list(JURISDICTION_SHORTFORMS.keys())
    recon_types = ["COMP", "POS"]
    return render_template(
        'home.html',
        asset_classes=asset_classes,
        jurisdictions=jurisdictions,
        recon_types=recon_types,
        response="",
        file_paths=[]
    )

@app.route('/recon', methods=['POST'])
def recon():
    try:
        # Fetch form data
        asset_class = request.form['assetClass']
        recon_type = request.form['reconType']
        recon_date = request.form['reconDate']
        flow_type = request.form['flowType']

        # Get jurisdictions dynamically
        jurisdictions = request.form.getlist('jurisdiction') if flow_type == "onereg" else [request.form['jurisdiction']]

        # Debug input received
        print(f"Received Inputs - Asset Class: {asset_class}, Flow Type: {flow_type}, Jurisdictions: {jurisdictions}")

        # Handle specific cases for 'onereg'
        if flow_type == "onereg" and asset_class == "CO":
            # Ensure only allowed jurisdictions are processed
            allowed_jurisdictions = {"JFSA", "CANADA", "CFTC"}
            jurisdictions = [j for j in jurisdictions if j in allowed_jurisdictions]

        # Debug filtered jurisdictions
        print(f"Filtered Jurisdictions: {jurisdictions}")

        jurisdiction_str = ",".join(jurisdictions)

        try:
            recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
        except ValueError:
            return render_template(
                'home.html',
                asset_classes=["FX", "IR", "EQ", "CO", "CD"],
                jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
                recon_types=["COMP", "POS"],
                response="Invalid Date Format. Please use YYYY-MM-DD.",
                file_paths=[]
            )

        # Build the command based on flow type
        cmd = ""
        if flow_type.lower() == "onereg":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        elif flow_type.lower() == "file":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        else:
            return render_template(
                'home.html',
                asset_classes=["FX", "IR", "EQ", "CO", "CD"],
                jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
                recon_types=["COMP", "POS"],
                response="Invalid Flow Type",
                file_paths=[]
            )

        # Debug the command to be executed
        print(f"Generated Command: {cmd}")

        # Execute the command
        result = subprocess.run(cmd, shell=True, text=True, capture_output=True)
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output} \n{command_error}".strip()

        if result.returncode == 0:
            response = "Request Processed Successfully:<br>{}".format(full_output.replace('\n', '<br>'))
        else:
            response = "Request Failed (Error Code: {}):<br>{}".format(result.returncode, full_output.replace('\n', '<br>'))

        print(f"Command Output: \n{command_output}")
        print(f"Command Error: \n{command_error}")
        return render_template(
            'home.html',
            asset_classes=["FX", "IR", "EQ", "CO", "CD"],
            jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
            recon_types=["COMP", "POS"],
            response=response,
            file_paths=[]
        )

    except Exception as e:
        # Capture any unexpected errors
        print(f"Error: {e}")
        return render_template(
            'home.html',
            asset_classes=["FX", "IR", "EQ", "CO", "CD"],
            jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
            recon_types=["COMP", "POS"],
            response=f"An error occurred: {str(e)}",
            file_paths=[]
        )

if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0',port=8129)
