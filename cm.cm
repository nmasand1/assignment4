@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    asset_class = request.form['assetClass']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Get list of selected jurisdictions
    jurisdictions = request.form.getlist('jurisdiction')  # Get all selected jurisdictions from the form

    # Remove duplicates and print the selected jurisdictions
    jurisdictions = list(set(jurisdictions))  # Convert to set and back to list to remove duplicates
    print(f"Selected Jurisdictions after duplicate removal: {jurisdictions}")

    # If you need to exclude JFSA under certain conditions, you can do so here
    if 'JFSA' in jurisdictions:
        print("JFSA selected")
    else:
        print("JFSA not selected")
        
    # You can also explicitly exclude 'JFSA' if needed
    # jurisdictions = [jurisdiction for jurisdiction in jurisdictions if jurisdiction != 'JFSA']
    
    # Format the jurisdictions for the shell command
    jurisdiction_str = ",".join(jurisdictions)  # Create a comma-separated string of selected jurisdictions
    print(f"Jurisdictions as string: {jurisdiction_str}")

    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template_string(
            HTML_TEMPLATE, asset_classes=["FX", "IR", "EQ", "Co", "CD"],
            jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA"],
            recon_types=["COMP", "POS"],
            response="Invalid Date Format. Please use YYYY-MM-DD.", file_paths=[]
        )

    try:
        # Prepare the shell command based on flow type
        if flow_type.lower() == "onereg":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        elif flow_type.lower() == "file":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction_str} {recon_date_formatted}"
        else:
            return render_template_string(
                HTML_TEMPLATE, asset_classes=["FX", "IR", "EQ", "Co", "CD"],
                jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA"],
                recon_types=["COMP", "POS"],
                response="Invalid Flow Type", file_paths=[]
            )

        # Run the shell command
        result = subprocess.run(
            cmd, shell=True, text=True, capture_output=True
        )
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output} \n{command_error}".strip()

        if result.returncode == 0:
            response = f"Request Processed Successfully:<br>{full_output.replace('\n', '<br>')}"
        else:
            response = f"Request Failed (Error Code: {result.returncode}):<br>{full_output.replace('\n', '<br>')}"

        print(f"Command Output: \n{command_output}")
        print(f"Command Error: \n{command_error}")
    except Exception as e:
        response = f"Request Failed: {str(e)}"
        print(f"Exception Occurred: {str(e)}")

    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    file_paths = []
    asset_classes = ["FX", "IR", "EQ", "Co", "CD"]
    for asset_class in asset_classes:
        for recon_type in ["COMP", "POS"]:
            for jurisdiction in jurisdictions:
                jurisdiction_shortform = JURISDICTION_SHORTFORMS.get(jurisdiction, "")
                subdir = f"dtcc_{asset_class.lower()}_{jurisdiction_shortform}_{recon_type}"
                directory = os.path.join(BASE_DIR, asset_class, "data", subdir)
                if os.path.exists(directory):
                    files = os.listdir(directory)
                    for file in files:
                        relative_path = os.path.relpath(directory, BASE_DIR)
                        file_paths.append((file, relative_path))

    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=["FX", "IR", "EQ", "Co", "CD"],
        jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA"],
        recon_types=["COMP", "POS"],
        response=response, file_paths=file_paths
    )
