from flask import Flask, request, jsonify, send_file
import subprocess
import datetime
import os

# Flask app initialization
app = Flask(__name__)

PORT_NUMBER = 5000  # Changed to port 5000 for testing
PUBLIC_ENTRY = '/apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/SystemReconReplayUI.html'

@app.route('/system/recon/replay', methods=['GET'])
def replay_page():
    if os.path.exists(PUBLIC_ENTRY):
        print(f"Serving file: {PUBLIC_ENTRY}")
        return send_file(PUBLIC_ENTRY, mimetype='text/html'), 200
    print(f"File not found: {PUBLIC_ENTRY}")
    return """
    <html>
    <head><title>Error</title></head>
    <body>
    <h1>Invalid URL</h1>
    <p>The requested file was not found. Please verify the URL and try again.</p>
    </body>
    </html>
    """, 404

@app.route('/system/recon/replay', methods=['POST'])
def recon_replay():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    try:
        # Extract form data from the POST request
        fields = request.form
        asset_class = fields.get('assetClass', '').strip()
        jurisdiction = fields.get('jurisdiction', '').strip()
        recon_date = fields.get('reconDate', '').strip()
        flow_type = fields.get('flowType', '').strip()

        print(f"assetClass: {asset_class}")
        print(f"jurisdiction: {jurisdiction}")
        print(f"reconDate: {recon_date}")
        print(f"flowType: {flow_type}")

        response = ""

        if flow_type.lower() == "onereg":
            try:
                result_or = subprocess.check_output(
                    ["sh", "/apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh",
                     asset_class, jurisdiction, recon_date],
                    stderr=subprocess.STDOUT
                )
                response = "Request Processed Successfully: OneRegLoading"
            except subprocess.CalledProcessError as e:
                response = f"Request Process Failed: OneRegLoading. Error: {e.output.decode()}"
        elif flow_type.lower() == "file":
            try:
                result_fl = subprocess.check_call(
                    ["sh", "/apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh",
                     asset_class, jurisdiction, recon_date],
                    stderr=subprocess.STDOUT
                )
                response = "Request Processed Successfully: FileLoading"
            except subprocess.CalledProcessError as e:
                response = f"Request Process Failed: FileLoading. Error: {e.output.decode()}"
        else:
            response = "Request Process Failed: Invalid flow type."

        enow = datetime.datetime.now()
        print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")
        return jsonify({"message": response}), 200

    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    print(f"Starting server on port {PORT_NUMBER}")
    app.run(host='0.0.0.0', port=PORT_NUMBER)
