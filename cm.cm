import os
import datetime
import subprocess
from flask import render_template_string, request

# Base directory where your data is stored
BASE_DIR = "/apps/TTR/prodp/OneReg/OneRegReconciler/recondataloader"

# Mapping of Jurisdiction shortforms
JURISDICTION_SHORTFORMS = {
    "JFSA": "na",
    "CANADA": "canada",
    "CFTC": "cftc",
    "SEC": "sec",
    "HKMA": "hkma",
    "ESMA": "esma",
    "HKTR": "hktr",
    "FCA": "fca",
    "MAS": "mas",
    "ASIC": "asic"
}

# Mapping of Asset Classes
ASSET_CLASSES = {
    "FX": "fx",
    "IR": "ir",
    "EQ": "eq",
    "Co": "co",
    "CD": "cd"
}

@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    # Get form data
    asset_class = request.form['assetClass']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Process multiple jurisdictions (ensure jurisdictions is a list)
    jurisdictions = request.form.getlist('jurisdiction') if flow_type == "onereg" else [request.form['jurisdiction']]
    jurisdiction_str = ",".join(jurisdictions)

    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template_string(
            HTML_TEMPLATE,
            asset_classes=["FX", "IR", "EQ", "Co", "CD"],
            jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
            recon_types=["COMP", "POS"],
            response="Invalid Date Format. Please use YYYY-MM-DD.",
            file_paths=[]
        )

    try:
        # Prepare the shell command
        if flow_type.lower() == "onereg":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        elif flow_type.lower() == "file":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        else:
            return render_template_string(
                HTML_TEMPLATE,
                asset_classes=["FX", "IR", "EQ", "Co", "CD"],
                jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
                recon_types=["COMP", "POS"],
                response="Invalid Flow Type",
                file_paths=[]
            )

        # Run the shell command and capture output
        result = subprocess.run(
            cmd, shell=True, text=True, capture_output=True
        )
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output}\n{command_error}".strip()

        if result.returncode == 0:
            response = f"Request Processed Successfully:<br>{full_output.replace('\n', '<br>')}"
        else:
            response = f"Request Failed (Error Code: {result.returncode}):<br>{full_output.replace('\n', '<br>')}"

        print(f"Command Output:\n{command_output}")
        print(f"Command Error:\n{command_error}")

    except Exception as e:
        response = f"Request Failed: {str(e)}"
        print(f"Exception Occurred: {str(e)}")

    enow = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")

    # Populate the file paths
    file_paths = []
    try:
        for asset_class in ASSET_CLASSES:
            for recon_type in ["cmp", "posval"]:
                for jurisdiction in jurisdictions:
                    jurisdiction_shortform = JURISDICTION_SHORTFORMS.get(jurisdiction, "na")
                    directory = os.path.join(BASE_DIR, asset_class, "data", f"dtcc_{ASSET_CLASSES[asset_class]}_{jurisdiction_shortform}_{recon_type}")
                    print(f"Checking directory: {directory}")  # Debugging line
                    if os.path.exists(directory):
                        files = os.listdir(directory)
                        for file in files:
                            relative_path = os.path.relpath(directory, BASE_DIR)
                            file_paths.append((file, relative_path))
        
        # Debugging line to check the file paths
        print(f"File Paths: {file_paths}")

    except Exception as e:
        print(f"Error while fetching file paths: {str(e)}")

    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=["FX", "IR", "EQ", "Co", "CD"],
        jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
        recon_types=["COMP", "POS"],
        response=response,
        file_paths=file_paths  # Pass the file_paths to the template
    )
