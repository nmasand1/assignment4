from flask import Flask, request, render_template_string
import subprocess
import datetime

app = Flask(__name__)

HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>Recon Automation Framework</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select, button {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        button {
            background-color: #007BFF;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Recon Automation Framework</h1>
        <form method="POST" action="/recon">
            <label for="assetClass">Asset Class:</label>
            <select id="assetClass" name="assetClass" required>
                <option value="FX">FX</option>
                <option value="IR">IR</option>
                <option value="EQ">EQ</option>
                <option value="Co">Co</option>
                <option value="CD">CD</option>
            </select>

            <label for="jurisdiction">Jurisdiction:</label>
            <select id="jurisdiction" name="jurisdiction" required>
                <option value="JFSA">JFSA</option>
                <option value="CANADA">CANADA</option>
                <option value="MAS">MAS</option>
                <option value="HKMA">HKMA</option>
                <option value="HKTR">HKTR</option>
                <option value="ESMA">ESMA</option>
                <option value="CFTC">CFTC</option>
                <option value="ASIC">ASIC</option>
                <option value="SEC">SEC</option>
                <option value="FCA">FCA</option>
                <option value="DSMATCH">DSMATCH</option>
            </select>

            <label for="reconType">Recon Type:</label>
            <input type="text" id="reconType" name="reconType" required>

            <label for="reconDate">Recon Date (YYYY-MM-DD):</label>
            <input type="text" id="reconDate" name="reconDate" required>

            <label for="flowType">Flow Type:</label>
            <select id="flowType" name="flowType" required>
                <option value="onereg">OneReg</option>
                <option value="file">File</option>
            </select>

            <button type="submit">Submit</button>
        </form>
    </div>
</body>
</html>
"""

@app.route('/', methods=['GET'])
def home():
    return render_template_string(HTML_TEMPLATE)

@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    # Parse form data
    asset_class = request.form['assetClass']
    jurisdiction = request.form['jurisdiction']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Convert date to YYMMDD format
    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return "Invalid Date Format. Please use YYYY-MM-DD."

    # Validate flowType and form the command
    if flow_type.lower() == "onereg":
        script_path = "/apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh"
    elif flow_type.lower() == "file":
        script_path = "/apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh"  # Replace with actual file script path
    else:
        return "Invalid Flow Type."

    # Prepare the command for subprocess
    command = [
        "sh", 
        script_path, 
        asset_class, jurisdiction, recon_type, recon_date_formatted
    ]

    # Run the subprocess and capture the output
    try:
        result = subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        output = result.stdout
        error = result.stderr
        print(f"Command Output: {output}")
        print(f"Command Error: {error}")
    except subprocess.CalledProcessError as e:
        return f"Error occurred: {e.stderr}"

    return f"Recon Data Loading Finished. Output: {output}"

if __name__ == '__main__':
    app.run(host=0.0.0.0, debug=True)
