import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GridComponent } from '../../../common/components/grid/grid.component';
import { DashboardGridHelper } from '../dashboard/util/dashboard-grid-helper';
import { GridColumns, PartialBy } from '../../../common/components/grid/grid-columns';
import { DashboardStaticDataService } from '../services/dashboard-static-data.service';
import { TransformationsStaticDataService } from '../services/transformations-static-data.service';
import { DataLoadCompletedEvent } from '../../../common/components/grid/events/data-load-completed-event';
import { LightHouseApiService } from '../../../services/lighthouse-api.service';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule, GridComponent],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  private readonly dashboardStaticData = inject(DashboardStaticDataService);
  private readonly transformationStaticData = inject(TransformationsStaticDataService);
  
  public dashboardGridColumns: PartialBy<GridColumns, 'propertyObject'>[] = [];
  public dashboardGridVisibleColumns: string[] = [];
  public dashboardGridData: any[] = [];
  public transformationGridColumns: PartialBy<GridColumns, 'propertyObject'>[] = [];
  public transformationGridVisibleColumns: string[] = [];
  public transformationGridData: any[] = [];
  
  public isTransformationPopUpVisible = false; // Flag for popup visibility

  constructor(private httpApiService: LightHouseApiService) {}

  ngOnInit(): void {
    this.dashboardGridColumns = this.dashboardStaticData.dashboardGridMetaData;
    this.dashboardGridVisibleColumns = this.dashboardStaticData.dashboardGridVisibleColumns;
    this.getDashboardGridData();
    
    this.transformationGridColumns = this.transformationStaticData.transformationsGridMetaData;
    this.transformationGridVisibleColumns = this.transformationStaticData.transformationsGridVisibleColumns;
    this.getTransformationGridData();
  }

  onDashBoardGridDataLoadCompleted(event: DataLoadCompletedEvent): void {
    if (event.eventData) {
      window.parent[event.eventData.gridId] = event.eventData.gridComponent;
    }
  }

  getDashboardGridData(): void {
    this.httpApiService.fetchFlattenFieldData().subscribe(res => {
      this.dashboardGridData = res;
    });
  }

  getTransformationGridData(): void {
    this.httpApiService.fetchTransformationFieldData().subscribe(res => {
      this.transformationGridData = res;
    });
  }

  onDetailsButtonClick(): void {
    this.isTransformationPopUpVisible = true; // Show the popup
  }

  closePopup(): void {
    this.isTransformationPopUpVisible = false; // Hide the popup
  }
}
