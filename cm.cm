<select id="flowType" name="flowType" onchange="toggleJurisdictions(this.value)">
    <option value="onereg">OneReg</option>
    <option value="file">File</option>
</select>

<select id="jurisdiction" name="jurisdiction" multiple>
    <option value="JFSA">JFSA</option>
    <option value="CANADA">CANADA</option>
    <option value="MAS">MAS</option>
    <option value="HKMA">HKMA</option>
    <option value="HKTR">HKTR</option>
    <option value="ESMA">ESMA</option>
    <option value="CFTC">CFTC</option>
    <option value="ASIC">ASIC</option>
    <option value="SEC">SEC</option>
    <option value="FCA">FCA</option>
    <option value="DSMATCH">DSMATCH</option>
</select>

<script>
    function toggleJurisdictions(flowType) {
        const jurisdictionSelect = document.getElementById("jurisdiction");
        if (flowType === "onereg") {
            jurisdictionSelect.multiple = true;
        } else {
            jurisdictionSelect.multiple = false;
        }
    }
</script>



@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Parse form data
    asset_class = request.form['assetClass']
    jurisdiction = request.form['jurisdiction']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']
    
    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template_string(
            HTML_TEMPLATE,
            asset_classes=["FX", "IR", "EQ", "Co", "CD"],
            jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
            recon_types=["COMP", "POS"],
            response="Invalid Date Format. Please use YYYY-MM-DD.",
            file_paths=[]
        )
    
    try:
        # Prepare the shell command
        if flow_type.lower() == "onereg":
            # Handle single or multiple jurisdictions
            jurisdictions = jurisdiction.replace(" ", "").split(",")  # Allow multiple jurisdictions separated by commas
            jurisdictions_param = ",".join(jurisdictions)  # Prepare for shell script
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdictions_param} {recon_type} {recon_date_formatted}"
        elif flow_type.lower() == "file":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction} {recon_type} {recon_date_formatted}"
        else:
            return render_template_string(
                HTML_TEMPLATE,
                asset_classes=["FX", "IR", "EQ", "Co", "CD"],
                jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
                recon_types=["COMP", "POS"],
                response="Invalid Flow Type",
                file_paths=[]
            )
        
        # Run the shell command and capture output
        result = subprocess.run(
            cmd, shell=True, text=True, capture_output=True
        )
        
        # Combine stdout and stderr for a complete response
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output}\n{command_error}".strip()

        # Determine response based on return code
        if result.returncode == 0:
            response = "Request Processed Successfully:<br>{}".format(full_output.replace('\n', '<br>'))
        else:
            response = "Request Failed (Error Code: {}):<br>{}".format(result.returncode, full_output.replace('\n', '<br>'))
        
        # Log output to console
        print(f"Command Output:\n{command_output}")
        print(f"Command Error:\n{command_error}")
    
    except Exception as e:
        response = f"Request Failed: {str(e)}"
        print(f"Exception Occurred: {str(e)}")
    
    enow = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # List files in all asset class directories
    asset_classes = ["FX", "IR", "EQ", "Co", "CD"]
    file_paths = []
    for asset_class in asset_classes:
        for recon_type in ["cmp", "posval"]:
            jurisdiction_shortform = JURISDICTION_SHORTFORMS.get(jurisdiction, "na")
            subdir = f"dtcc_{asset_class.lower()}_{jurisdiction_shortform}_{recon_type}"
            directory = os.path.join(BASE_DIR, asset_class, "data", subdir)
            if os.path.exists(directory):
                files = os.listdir(directory)
                for file in files:
                    relative_path = os.path.relpath(directory, BASE_DIR)
                    file_paths.append((file, relative_path))
    
    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=["FX", "IR", "EQ", "Co", "CD"],
        jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
        recon_types=["COMP", "POS"],
        response=response,
        file_paths=file_paths
    )
