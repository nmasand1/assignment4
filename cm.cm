import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Adjust the path as necessary
import { LightHouseApiService } from 'src/app/services/lighthouse-api.service'; // Adjust the path as necessary

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  selectedDate: string = '';
  filteredResults: any[] = []; // To hold the filtered data results
  private apiUrl = 'http://1234.234:8080/fightfox/transformationFieldData'; // Replace with the correct API URL

  constructor(private http: HttpClient, private apiService: LightHouseApiService) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.apiService.getFiltersMetaData().subscribe(
      (response) => {
        // Assuming response has the structure { meta: null, error: null, data: { ... } }
        const data = response.data;

        this.regulations = data.regulations.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.reportableDatasets = data.reportableDatasets.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.reportableFields = data.reportableFields.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.assetClasses = data.assetClasses.map((item: any) => ({
          id: item.id,
          name: item.assetclass,
          displayName: item.assetclass,
          selected: false,
        }));

        this.productType = data.productType.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));
      },
      (error) => {
        console.error('Error loading filter data:', error);
      }
    );
  }

  searchFilters(): void {
    const payload = {
      selectedDate: this.selectedDate,
      selectedRegulations: this.selectedRegulations.map(option => option.name),
      selectedReportableDatasets: this.selectedReportableDatasets.map(option => option.name),
      selectedReportableFields: this.selectedReportableFields.map(option => option.name),
      selectedAssetClasses: this.selectedAssetClasses.map(option => option.name),
      selectedProductType: this.selectedProductType.map(option => option.name)
    };

    console.log('Search Payload:', payload);

    // API call with search filters
    this.http.post<any[]>(this.apiUrl, payload).subscribe(
      (response) => {
        // Filter the response data based on selected filters
        let filteredData = response;

        // Apply filtering logic for each filter
        if (this.selectedRegulations.length > 0 && this.selectedRegulations[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedRegulations.some(reg => reg.name === item.regulationName));
        }

        if (this.selectedAssetClasses.length > 0 && this.selectedAssetClasses[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedAssetClasses.some(ac => ac.name === item.assetclass));
        }

        if (this.selectedProductType.length > 0 && this.selectedProductType[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedProductType.some(pt => pt.name === item.productType));
        }

        if (this.selectedReportableDatasets.length > 0 && this.selectedReportableDatasets[0].name !== 'All') {
          filteredData = filteredData.filter(item => this.selectedReportableDatasets.some(ds => ds.name === item.messageType));
        }

        // Update the filtered results
        this.filteredResults = filteredData;

        // Log the filtered results for debugging
        console.log('Filtered Data:', this.filteredResults);
      },
      (error) => {
        console.error('Error fetching filtered data:', error);
      }
    );
  }

  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    this.selectedDate = ''; // Reset selected date as well
    this.filteredResults = []; // Clear filtered results
  }

  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}
