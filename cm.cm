import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Assuming you have this interface

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  // Add selectedDate property
  selectedDate: string | null = null; // Initialize to null or with a default value

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableDatasets = data.data.reportableDatasets.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableFields = data.data.reportableFields.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));
    });
  }

  // Search functionality: Print the selected filters and include the selected date
  searchFilters(): void {
    console.log('Selected Regulations:', this.selectedRegulations);
    console.log('Selected Reportable Datasets:', this.selectedReportableDatasets);
    console.log('Selected Reportable Fields:', this.selectedReportableFields);
    console.log('Selected Asset Classes:', this.selectedAssetClasses);
    console.log('Selected Product Types:', this.selectedProductType);
    console.log('Selected Date:', this.selectedDate);
    
    // Make an API call with the selected filters and date
    const apiUrl = 'http://1234.234:8080/fightfox/transformationFieldData';
    const filters = {
      regulations: this.selectedRegulations.map((item) => item.id),
      reportableDatasets: this.selectedReportableDatasets.map((item) => item.id),
      reportableFields: this.selectedReportableFields.map((item) => item.id),
      assetClasses: this.selectedAssetClasses.map((item) => item.id),
      productType: this.selectedProductType.map((item) => item.id),
      date: this.selectedDate,
    };

    this.http.post(apiUrl, filters).subscribe((response) => {
      console.log('API response:', response);
    });
  }

  // Reset functionality: Clear all selected filters and selectedDate
  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    this.selectedDate = null; // Reset the selected date

    // Reset the selected state in the options array too
    this.regulations.forEach((option) => (option.selected = false));
    this.reportableDatasets.forEach((option) => (option.selected = false));
    this.reportableFields.forEach((option) => (option.selected = false));
    this.assetClasses.forEach((option) => (option.selected = false));
    this.productType.forEach((option) => (option.selected = false));
  }

  // Event handlers for when selections change in the MultiSelect components
  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }

  // Event handler for the date selection
  onDateChange(event: any): void {
    this.selectedDate = event.target.value;
  }
}
