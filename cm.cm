import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Assuming you have this interface

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];
  filteredResults: any[] = []; // To hold the filtered results based on search
  selectedDate: string = '';
  
  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';
  private jsonDataUrl = 'assets/mock-data/response/json2_fieldFlattenData.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.http.get<any>(this.jsonDataUrl).subscribe((data2) => {
        this.reportableDatasets = data2.data.reportableDatasets.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.reportableFields = data2.data.reportableFields.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.assetClasses = data2.data.assetClasses.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));

        this.productType = data2.data.productType.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));
      });
    });
  }

  // Search functionality: Filter the results based on selected filters
  searchFilters(): void {
    this.filteredResults = []; // Reset filtered results
    this.http.get<any>(this.jsonDataUrl).subscribe((data) => {
      const allResults = data.data.fields; // Assuming the field data is under this structure

      this.filteredResults = allResults.filter((field: any) => {
        const isRegulationMatched = this.selectedRegulations.length ? this.selectedRegulations.some(r => r.name === field.regulationName) : true;
        const isDatasetMatched = this.selectedReportableDatasets.length ? this.selectedReportableDatasets.some(d => d.name === field.reportabledataset) : true;
        const isFieldMatched = this.selectedReportableFields.length ? this.selectedReportableFields.some(f => f.name === field.fieldName) : true;
        const isAssetClassMatched = this.selectedAssetClasses.length ? this.selectedAssetClasses.some(a => a.name === field.assetClass) : true;
        const isProductTypeMatched = this.selectedProductType.length ? this.selectedProductType.some(p => p.name === field.productType) : true;
        const isDateMatched = this.selectedDate ? true : true; // Implement date logic if needed

        return isRegulationMatched && isDatasetMatched && isFieldMatched && isAssetClassMatched && isProductTypeMatched && isDateMatched;
      });

      // Log the results or process them as needed
      if (this.filteredResults.length === 0) {
        console.log('No results found');
      } else {
        console.log('Filtered Results:', this.filteredResults);
      }
    });
  }

  // Reset functionality: Clear all selected filters
  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    this.selectedDate = '';
    
    this.regulations.forEach((option) => (option.selected = false));
    this.reportableDatasets.forEach((option) => (option.selected = false));
    this.reportableFields.forEach((option) => (option.selected = false));
    this.assetClasses.forEach((option) => (option.selected = false));
    this.productType.forEach((option) => (option.selected = false));
  }

  // Event handlers for when selections change in the MultiSelect components
  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}



<!-- filters-panel.component.html -->
<div class="filters-container">
  <div class="filter-group">
    <app-multi-select
      [options]="regulations"
      label="Regulations"
      (selectionChange)="onRegulationsChange($event)"
    ></app-multi-select>
  </div>

  <div class="filter-group">
    <app-multi-select
      [options]="reportableDatasets"
      label="Reportable Datasets"
      (selectionChange)="onReportableDatasetsChange($event)"
    ></app-multi-select>
  </div>

  <div class="filter-group">
    <app-multi-select
      [options]="reportableFields"
      label="Reportable Fields"
      (selectionChange)="onReportableFieldsChange($event)"
    ></app-multi-select>
  </div>

  <div class="filter-group">
    <app-multi-select
      [options]="assetClasses"
      label="Asset Classes"
      (selectionChange)="onAssetClassesChange($event)"
    ></app-multi-select>
  </div>

  <div class="filter-group">
    <app-multi-select
      [options]="productType"
      label="Product Types"
      (selectionChange)="onProductTypeChange($event)"
    ></app-multi-select>
  </div>

  <div class="filter-group">
    <input type="date" [(ngModel)]="selectedDate" />
  </div>

  <div class="filter-group">
    <button (click)="searchFilters()">Search</button>
    <button (click)="resetFilters()">Reset</button>
  </div>
</div>

<!-- Displaying the filtered results -->
<div *ngIf="filteredResults.length > 0">
  <h3>Filtered Results:</h3>
  <ul>
    <li *ngFor="let result of filteredResults">
      {{ result.fieldName }} - {{ result.regulationName }} - {{ result.assetClass }} - {{ result.messageType }}
    </li>
  </ul>
</div>




/* filters-panel.component.css */
.filters-container {
  display: flex;
  flex-wrap: wrap; /* Allows wrapping if the screen is too small */
  gap: 10px; /* Adjusts space between the items */
  align-items: center; /* Centers items vertically */
}

.filter-group {
  display: flex;
  flex-direction: column; /* Keeps the label above the select */
  min-width: 150px; /* Set a minimum width for dropdowns */
}
