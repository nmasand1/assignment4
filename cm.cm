import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Assuming you have this interface

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';
  private apiUrl = 'http://1234.234:8080/fightfox/transformationFieldData'; // Replace with correct API URL

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  // Load the filter data from json1_filters.json
  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableDatasets = data.data.reportableDatasets.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableFields = data.data.reportableFields.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));
    });
  }

  // Search functionality: Call API and apply filters
  searchFilters(): void {
    // Fetch data from the external API
    this.http.get<any[]>(this.apiUrl).subscribe((apiData) => {
      // Filter the data based on selected filters
      const filteredData = apiData.filter((item) => {
        return (
          this.matchFilter(item.assetclass, this.selectedAssetClasses) &&
          this.matchFilter(item.producttype, this.selectedProductType)
        );
      });

      // Output the filtered data to the console (you can modify this to display it in the UI)
      console.log('Filtered Data:', filteredData);
    });
  }

  // Helper function to match selected filters
  matchFilter(value: string, selectedOptions: MultiSelectOption[]): boolean {
    if (selectedOptions.length === 0) return true; // No filter selected, match all
    return selectedOptions.some((option) => option.name === value);
  }

  // Reset functionality: Clear all selected filters
  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];

    // Reset the selected state in the options array too
    this.regulations.forEach((option) => (option.selected = false));
    this.reportableDatasets.forEach((option) => (option.selected = false));
    this.reportableFields.forEach((option) => (option.selected = false));
    this.assetClasses.forEach((option) => (option.selected = false));
    this.productType.forEach((option) => (option.selected = false));
  }

  // Event handlers for when selections change in the MultiSelect components
  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}



<div class="filters-panel">
  <!-- Dropdown for Regulations -->
  <div class="filter-group">
    <label for="regulations">Regulations:</label>
    <select multiple [(ngModel)]="selectedRegulations" (change)="onRegulationsChange($event.target.selectedOptions)">
      <option *ngFor="let regulation of regulations" [value]="regulation">{{ regulation.displayName }}</option>
    </select>
  </div>

  <!-- Dropdown for Reportable Datasets -->
  <div class="filter-group">
    <label for="reportableDatasets">Reportable Datasets:</label>
    <select multiple [(ngModel)]="selectedReportableDatasets" (change)="onReportableDatasetsChange($event.target.selectedOptions)">
      <option *ngFor="let dataset of reportableDatasets" [value]="dataset">{{ dataset.displayName }}</option>
    </select>
  </div>

  <!-- Dropdown for Reportable Fields -->
  <div class="filter-group">
    <label for="reportableFields">Reportable Fields:</label>
    <select multiple [(ngModel)]="selectedReportableFields" (change)="onReportableFieldsChange($event.target.selectedOptions)">
      <option *ngFor="let field of reportableFields" [value]="field">{{ field.displayName }}</option>
    </select>
  </div>

  <!-- Dropdown for Asset Classes -->
  <div class="filter-group">
    <label for="assetClasses">Asset Classes:</label>
    <select multiple [(ngModel)]="selectedAssetClasses" (change)="onAssetClassesChange($event.target.selectedOptions)">
      <option *ngFor="let assetClass of assetClasses" [value]="assetClass">{{ assetClass.displayName }}</option>
    </select>
  </div>

  <!-- Dropdown for Product Type -->
  <div class="filter-group">
    <label for="productType">Product Type:</label>
    <select multiple [(ngModel)]="selectedProductType" (change)="onProductTypeChange($event.target.selectedOptions)">
      <option *ngFor="let product of productType" [value]="product">{{ product.displayName }}</option>
    </select>
  </div>

  <!-- Date Input Field -->
  <div class="filter-group">
    <label for="date">Date:</label>
    <input type="date" id="date" name="date" [(ngModel)]="selectedDate">
  </div>

  <!-- Buttons for Search and Reset -->
  <div class="button-group">
    <button (click)="searchFilters()">Search</button>
    <button (click)="resetFilters()">Reset</button>
  </div>
</div>
