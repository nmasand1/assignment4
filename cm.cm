from flask import Flask, render_template, request, jsonify
import subprocess
import platform
import os

app = Flask(__name__)

# Path to the shell script (modify accordingly)
SHELL_SCRIPT_PATH = "recon_automation.sh"

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/run_script', methods=['POST'])
def run_script():
    try:
        # Get form data
        asset_class = request.form.get('assetClass')
        jurisdiction = request.form.get('jurisdiction')
        recon_type = request.form.get('reconType')
        recon_date = request.form.get('reconDate')  # Format: YYMMDD

        # Validate form inputs
        if not all([asset_class, jurisdiction, recon_type, recon_date]):
            return jsonify({"error": "Missing required parameters"}), 400

        # Build the command
        command = [SHELL_SCRIPT_PATH, asset_class, jurisdiction, recon_type, recon_date]

        # Check platform and execute
        if platform.system() == "Windows":
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
        else:
            result = subprocess.run(['sh'] + command, capture_output=True, text=True)

        # Handle the result
        if result.returncode == 0:
            return jsonify({"message": "Script executed successfully", "output": result.stdout}), 200
        else:
            return jsonify({"error": "Script failed", "output": result.stderr}), 500

    except FileNotFoundError as e:
        return jsonify({"error": f"Shell script not found: {str(e)}"}), 500
    except Exception as e:
        return jsonify({"error": f"An error occurred: {str(e)}"}), 500

if __name__ == '__main__':
    # Use a specific port and make it accessible on Linux/Windows
    app.run(host="0.0.0.0", port=5000, debug=True)
