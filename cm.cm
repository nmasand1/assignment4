import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Adjust path as necessary

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  selectedDate: string = '';

  filteredResults: any[] = []; // To hold the filtered data results

  // API URL for fetching filter options
  private filtersApiUrl = 'http://1234.234:8080/fightfox/getFilterOptions'; // Replace with the actual filter API URL

  // API URL for performing the search based on selected filters
  private searchApiUrl = 'http://1234.234:8080/fightfox/transformationFieldData'; // Replace with the correct search API URL

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  // Fetching filter options from the API
  loadFiltersData(): void {
    this.http.get<any>(this.filtersApiUrl).subscribe(
      (response) => {
        const data = response.data;

        // Mapping the 'assetClasses' from API to dropdown options
        this.assetClasses = data.assetClasses.map((item: any) => ({
          id: item.id,
          name: item.assetclass, // Use 'assetclass' for the dropdown name
          displayName: item.assetclass, // Use 'assetclass' for the display name
          selected: false,
        }));

        // Mapping the 'productType' from API to dropdown options
        this.productType = data.productTypes.map((item: any) => ({
          id: item.id,
          name: item.producttype, // Use 'producttype' for the dropdown name
          displayName: item.producttype, // Use 'producttype' for the display name
          selected: false,
        }));

        // Similarly map for regulations, reportableDatasets, reportableFields
        this.regulations = data.regulations.map((item: any) => ({
          id: item.id,
          name: item.regulation, // Use 'regulation' for the dropdown name
          displayName: item.regulation, // Use 'regulation' for the display name
          selected: false,
        }));

        this.reportableDatasets = data.reportableDatasets.map((item: any) => ({
          id: item.id,
          name: item.datasetName, // Use 'datasetName' for the dropdown name
          displayName: item.datasetName, // Use 'datasetName' for the display name
          selected: false,
        }));

        this.reportableFields = data.reportableFields.map((item: any) => ({
          id: item.id,
          name: item.fieldName, // Use 'fieldName' for the dropdown name
          displayName: item.fieldName, // Use 'fieldName' for the display name
          selected: false,
        }));
      },
      (error) => {
        console.error('Error fetching filter options from API:', error);
      }
    );
  }

  searchFilters(): void {
    const payload = {
      selectedDate: this.selectedDate,
      selectedRegulations: this.selectedRegulations.map((option) => option.name),
      selectedReportableDatasets: this.selectedReportableDatasets.map((option) => option.name),
      selectedReportableFields: this.selectedReportableFields.map((option) => option.name),
      selectedAssetClasses: this.selectedAssetClasses.map((option) => option.name),
      selectedProductType: this.selectedProductType.map((option) => option.name),
    };

    console.log('Search Payload:', payload);

    // API call with search filters
    this.http.post<any[]>(this.searchApiUrl, payload).subscribe(
      (response) => {
        this.filteredResults = response; // Update the filtered results

        // Log the filtered results for debugging
        console.log('Filtered Data:', this.filteredResults);
      },
      (error) => {
        console.error('Error fetching filtered data:', error);
      }
    );
  }

  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    this.selectedDate = ''; // Reset selected date as well
    this.filteredResults = []; // Clear filtered results
  }

  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}
