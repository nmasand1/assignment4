import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Adjust the path as necessary

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  selectedDate: string = '';

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';
  private apiUrl = 'http://1234.234:8080/fightfox/transformationFieldData'; // Replace with the correct API URL

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableDatasets = data.data.reportableDatasets.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableFields = data.data.reportableFields.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));
    });
  }

  // The search function that makes the API call
  searchFilters(): void {
    const payload = {
      selectedDate: this.selectedDate,
      selectedRegulations: this.selectedRegulations.map(option => option.name),
      selectedReportableDatasets: this.selectedReportableDatasets.map(option => option.name),
      selectedReportableFields: this.selectedReportableFields.map(option => option.name),
      selectedAssetClasses: this.selectedAssetClasses.map(option => option.name),
      selectedProductType: this.selectedProductType.map(option => option.name)
    };

    console.log('Search Payload:', payload); // Logging the payload for debugging

    // Make an API call to search with the selected filters
    this.http.post<any>(this.apiUrl, payload).subscribe(
      (response) => {
        console.log('API Response:', response);
        // Process the response, e.g., update the filtered list or display results
        // Example: If the API returns filtered datasets
        this.reportableDatasets = response.filteredReportableDatasets.map((item: any) => ({
          id: item.id,
          name: item.name,
          displayName: item.displayName,
          selected: false,
        }));
        // Handle any other data returned by the API as needed
      },
      (error) => {
        console.error('Error fetching filtered data:', error);
      }
    );
  }

  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    this.selectedDate = ''; // Reset selected date as well
  }

  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}
