import { Component, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GridComponent } from '../../common/components/grid/grid.component';
import { DashboardStaticDataService } from '../services/dashboard-static-data.service';
import { TransformationsStaticDataService } from '../services/transformations-static-data.service';
import { DataLoadCompletedEvent } from '../../common/components/grid/events/data-load-completed-event';
import { LightHouseApiService } from '../../services/lighthouse-api.service';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule, GridComponent],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  public isTransformationPopUpVisible = false;

  // Inject the necessary services
  private readonly dashboardStaticData = inject(DashboardStaticDataService);
  private readonly transformationStaticData = inject(TransformationsStaticDataService);

  // Grid Data
  public dashboardGridColumns: any[] = [];
  public dashboardGridVisibleColumns: string[] = [];
  public dashboardGridData: any[] = [];

  public transformationGridColumns: any[] = [];
  public transformationGridVisibleColumns: string[] = [];
  public transformationGridData: any[] = [];

  constructor(private httpApiService: LightHouseApiService) {}

  ngOnInit(): void {
    this.dashboardGridColumns = this.dashboardStaticData.dashboardGridMetaData;
    this.dashboardGridVisibleColumns = this.dashboardStaticData.dashboardGridVisibleColumns;
    this.getDashboardGridData();

    this.transformationGridColumns = this.transformationStaticData.transformationsGridMetaData;
    this.transformationGridVisibleColumns = this.transformationStaticData.transformationsGridVisibleColumns;
    this.getTransformationGridData();
  }

  // Fetch data for the dashboard grid
  getDashboardGridData(): void {
    this.httpApiService.fetchFlattenFieldData().subscribe((res) => {
      this.dashboardGridData = res;
    });
  }

  // Fetch data for the transformation grid
  getTransformationGridData(): void {
    this.httpApiService.fetchTransformationFieldData().subscribe((res) => {
      this.transformationGridData = res;
    });
  }

  // Toggle visibility of the popup
  onDetailsButtonClick(): void {
    this.isTransformationPopUpVisible = !this.isTransformationPopUpVisible;
    console.log('Popup visibility:', this.isTransformationPopUpVisible); // Debug log
  }

  // Grid data load completed event
  onDashBoardGridDataLoadCompleted(event: DataLoadCompletedEvent): void {
    if (event.eventData) {
      window.parent[event.eventData.gridId] = event.eventData.gridComponent;
    }
  }

  onTransformationGridDataLoadCompleted(event: DataLoadCompletedEvent): void {
    if (event.eventData) {
      window.parent[event.eventData.gridId] = event.eventData.gridComponent;
    }
  }
}
