import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Adjust the path as necessary

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  selectedDate: string = '';

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';
  private apiUrl = 'http://1234.234:8080/fightfox/transformationFieldData'; // Replace with the correct API URL

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableDatasets = data.data.reportableDatasets.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableFields = data.data.reportableFields.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));
    });
  }

  searchFilters(): void {
    // Add search logic
  }

  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
  }

  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}





<div class="filters-panel">
  <h2>Filters Panel</h2>

  <div class="filters-row">
    <div class="filter-item">
      <app-multi-select
        [options]="regulations"
        label="Regulations"
        (selectionChange)="onRegulationsChange($event)"
      ></app-multi-select>
    </div>

    <div class="filter-item">
      <app-multi-select
        [options]="reportableDatasets"
        label="Reportable Datasets"
        (selectionChange)="onReportableDatasetsChange($event)"
      ></app-multi-select>
    </div>

    <div class="filter-item">
      <app-multi-select
        [options]="reportableFields"
        label="Reportable Fields"
        (selectionChange)="onReportableFieldsChange($event)"
      ></app-multi-select>
    </div>

    <div class="filter-item">
      <app-multi-select
        [options]="assetClasses"
        label="Asset Classes"
        (selectionChange)="onAssetClassesChange($event)"
      ></app-multi-select>
    </div>

    <div class="filter-item">
      <app-multi-select
        [options]="productType"
        label="Product Type"
        (selectionChange)="onProductTypeChange($event)"
      ></app-multi-select>
    </div>

    <div class="filter-item">
      <label for="datePicker">Select Date:</label>
      <input
        type="date"
        id="datePicker"
        [(ngModel)]="selectedDate"
      />
    </div>

    <div class="button-group">
      <button (click)="searchFilters()">Search</button>
      <button (click)="resetFilters()">Reset</button>
    </div>
  </div>
</div>




.filters-panel {
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.filters-row {
  display: flex;
  flex-wrap: wrap; /* Allow wrapping if there are too many filters */
  gap: 15px; /* Space between filter items */
  align-items: center; /* Center vertically */
}

.filter-item {
  flex: 1; /* Allow filters to grow */
  min-width: 150px; /* Minimum width for each filter item */
}

.button-group {
  display: flex;
  gap: 10px;
}

.filtered-data {
  margin-top: 20px;
  background-color: #fff;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}
