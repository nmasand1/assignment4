from flask import Blueprint, request, render_template
import subprocess
import datetime
import urlparse  # Ensure urlparse is imported

recon_routes = Blueprint('recon_routes', __name__)

@recon_routes.route('/')
def index():
    # Render the index.html template
    return render_template('index.html')

@recon_routes.route('/system/recon/replay', methods=['GET'])
def system_recon_replay():
    # This route was previously returning the SystemReconReplayUI.html content, 
    # but now we can simply return a message or render the index.html as needed.
    return render_template('index.html')  # You can choose to render index.html here too.

@recon_routes.route('/system/recon/replay', methods=['POST'])
def process_recon_data():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    content_len = int(request.headers.get('Content-Length', 0))
    post_body = request.data.decode('utf-8')
    fields = dict(urlparse.parse_qs(post_body))

    # Fetch fields, stripping unwanted characters and spaces
    assetClass = fields.get('assetClass', [''])[0].strip().replace("1", "'")
    jurisdiction = fields.get('jurisdiction', [''])[0].strip().replace("’", "")
    reconType = fields.get('recondate', [''])[0].strip().replace("’", "")
    reconDate = fields.get('flowType', [''])[0].strip().replace("’", "")

    print(f"assetClass: {assetClass}")
    print(f"jurisdiction: {jurisdiction}")
    print(f"reconType: {reconType}")
    print(f"reconDate: {reconDate}")

    response = "Request Process Failed : Please check and provide valid input"
    
    if reconType.lower() == "onereg":
        try:
            result = subprocess.check_output(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {assetClass} {jurisdiction} {reconType} {reconDate}",
                shell=True
            )
            response = "Request Process Successfully: OneReg Loading"
        except subprocess.CalledProcessError as e:
            response = f"Request Process Failed: OneReg Loading: {e.output}"
            print(f"Error code: {e.returncode}, {e.output}")

    elif reconType.lower() == "file":
        try:
            result = subprocess.check_call(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {assetClass} {jurisdiction} {reconType} {reconDate}",
                shell=True
            )
            response = "Request Process Successfully: File Loading"
        except subprocess.CalledProcessError as e:
            response = f"Request Process Failed: File Loading: {e.output}"
            print(f"Error code: {e.returncode}, {e.output}")

    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    return response, 200
