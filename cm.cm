from flask import Flask, request, render_template_string
import subprocess
import datetime

app = Flask(__name__)

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recon Automation Framework</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select, button {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        button {
            background-color: #007BFF;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Recon Automation Framework</h1>
        <form method="POST" action="/recon">
            <label for="assetClass">Asset Class:</label>
            <select id="assetClass" name="assetClass" required>
                {% for asset in asset_classes %}
                    <option value="{{ asset }}">{{ asset }}</option>
                {% endfor %}
            </select>

            <label for="jurisdiction">Jurisdiction:</label>
            <select id="jurisdiction" name="jurisdiction" required>
                {% for jurisdiction in jurisdictions %}
                    <option value="{{ jurisdiction }}">{{ jurisdiction }}</option>
                {% endfor %}
            </select>

            <label for="reconType">Recon Type:</label>
            <select id="reconType" name="reconType" required>
                {% for recon_type in recon_types %}
                    <option value="{{ recon_type }}">{{ recon_type }}</option>
                {% endfor %}
            </select>

            <label for="reconDate">Recon Date (YYYY-MM-DD):</label>
            <input type="date" id="reconDate" name="reconDate" required>

            <label for="flowType">Flow Type:</label>
            <select id="flowType" name="flowType" required>
                <option value="onereg">OneReg</option>
                <option value="file">File</option>
            </select>

            <button type="submit">Submit</button>
        </form>
        
        <h2>Output:</h2>
        <p>{{ response }}</p>
    </div>
</body>
</html>
"""

@app.route('/', methods=['GET'])
def home():
    asset_classes = ["FX", "IR", "EQ", "Co", "CD"]  # Example Asset Classes
    jurisdictions = ["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"]
    recon_types = ["COMP", "POS"]  # Example Recon Types
    return render_template_string(HTML_TEMPLATE, 
                                  asset_classes=asset_classes, 
                                  jurisdictions=jurisdictions, 
                                  recon_types=recon_types, 
                                  response="")

@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    # Parse form data
    asset_class = request.form['assetClass']
    jurisdiction = request.form['jurisdiction']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Convert date to YYMMDD format
    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template_string(HTML_TEMPLATE, 
                                      asset_classes=["FX", "IR", "EQ", "Co", "CD"], 
                                      jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"], 
                                      recon_types=["COMP", "POS"], 
                                      response="Invalid Date Format. Please use YYYY-MM-DD.")

    try:
        if flow_type.lower() == "onereg":
            result = subprocess.check_output(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction} {recon_type} {recon_date_formatted}",
                shell=True
            )
            response = f"Request Processed Successfully: OneReg Loading\n{result.decode('utf-8')}"
        elif flow_type.lower() == "file":
            result = subprocess.check_output(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction} {recon_type} {recon_date_formatted}",
                shell=True
            )
            response = f"Request Processed Successfully: File Loading\n{result.decode('utf-8')}"
        else:
            response = "Request Failed: Invalid Flow Type"
    except subprocess.CalledProcessError as e:
        response = f"Request Failed: {str(e)}\nError Code: {e.returncode}, Output: {e.output.decode('utf-8')}"

    enow = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")
    return render_template_string(HTML_TEMPLATE, 
                                  asset_classes=["FX", "IR", "EQ", "Co", "CD"], 
                                  jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"], 
                                  recon_types=["COMP", "POS"], 
                                  response=response)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8129)































from flask import Flask, request, render_template_string, send_file
import subprocess
import datetime
import os

app = Flask(__name__)

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recon Automation Framework</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select, button {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        button {
            background-color: #007BFF;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        .file-list {
            margin-top: 20px;
        }
        .file-list ul {
            list-style-type: none;
            padding: 0;
        }
        .file-list li {
            margin-bottom: 10px;
        }
        .file-list a {
            text-decoration: none;
            color: #007BFF;
        }
        .file-list a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Recon Automation Framework</h1>
        <form method="POST" action="/recon">
            <label for="assetClass">Asset Class:</label>
            <select id="assetClass" name="assetClass" required>
                {% for asset in asset_classes %}
                    <option value="{{ asset }}">{{ asset }}</option>
                {% endfor %}
            </select>

            <label for="jurisdiction">Jurisdiction:</label>
            <select id="jurisdiction" name="jurisdiction" required>
                {% for jurisdiction in jurisdictions %}
                    <option value="{{ jurisdiction }}">{{ jurisdiction }}</option>
                {% endfor %}
            </select>

            <label for="reconType">Recon Type:</label>
            <select id="reconType" name="reconType" required>
                {% for recon_type in recon_types %}
                    <option value="{{ recon_type }}">{{ recon_type }}</option>
                {% endfor %}
            </select>

            <label for="reconDate">Recon Date (YYYY-MM-DD):</label>
            <input type="date" id="reconDate" name="reconDate" required>

            <label for="flowType">Flow Type:</label>
            <select id="flowType" name="flowType" required>
                <option value="onereg">OneReg</option>
                <option value="file">File</option>
            </select>

            <button type="submit">Submit</button>
        </form>
        
        <h2>Output:</h2>
        <p>{{ response }}</p>

        <div class="file-list">
            <h2>Available Files for Download:</h2>
            <ul>
                {% for file in files %}
                    <li><a href="/download?filename={{ file }}">{{ file }}</a></li>
                {% endfor %}
            </ul>
        </div>
    </div>
</body>
</html>
"""

# Set the directory where files are stored
DESTINATION_DIRECTORY = "/path/to/destination"  # Replace with the actual destination directory

@app.route('/', methods=['GET'])
def home():
    asset_classes = ["FX", "IR", "EQ", "Co", "CD"]  # Example Asset Classes
    jurisdictions = ["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"]
    recon_types = ["COMP", "POS"]  # Example Recon Types

    # List files in the destination directory
    try:
        files = os.listdir(DESTINATION_DIRECTORY)
    except FileNotFoundError:
        files = []

    return render_template_string(HTML_TEMPLATE, 
                                  asset_classes=asset_classes, 
                                  jurisdictions=jurisdictions, 
                                  recon_types=recon_types, 
                                  response="", 
                                  files=files)

@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    # Parse form data
    asset_class = request.form['assetClass']
    jurisdiction = request.form['jurisdiction']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Convert date to YYMMDD format
    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template_string(HTML_TEMPLATE, 
                                      asset_classes=["FX", "IR", "EQ", "Co", "CD"], 
                                      jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"], 
                                      recon_types=["COMP", "POS"], 
                                      response="Invalid Date Format. Please use YYYY-MM-DD.",
                                      files=os.listdir(DESTINATION_DIRECTORY))

    try:
        if flow_type.lower() == "onereg":
            result = subprocess.check_output(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction} {recon_type} {recon_date_formatted}",
                shell=True
            )
            response = f"Request Processed Successfully: OneReg Loading\n{result.decode('utf-8')}"
        elif flow_type.lower() == "file":
            result = subprocess.check_output(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction} {recon_type} {recon_date_formatted}",
                shell=True
            )
            response = f"Request Processed Successfully: File Loading\n{result.decode('utf-8')}"
        else:
            response = "Request Failed: Invalid Flow Type"
    except subprocess.CalledProcessError as e:
        response = f"Request Failed: {str(e)}\nError Code: {e.returncode}, Output: {e.output.decode('utf-8')}"

    enow = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")

    # Update file list after processing
    files = os.listdir(DESTINATION_DIRECTORY)

    return render_template_string(HTML_TEMPLATE, 
                                  asset_classes=["FX", "IR", "EQ", "Co", "CD"], 
                                  jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"], 
                                  recon_types=["COMP", "POS"], 
                                  response=response,
                                  files=files)

@app.route('/download', methods=['GET'])
def download():
    filename = request.args.get('filename')
    file_path = os.path.join(DESTINATION_DIRECTORY, filename)

    if not os.path.exists(file_path):
        return f"File {filename} not found.", 404

    return send_file(file_path, as_attachment=True)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8129)
