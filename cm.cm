import { Component, Input, Output, EventEmitter } from '@angular/core';

export interface MultiSelectOption {
  id: number;
  name: string;
  displayName: string;
  selected: boolean;
}

@Component({
  selector: 'app-multi-select',
  templateUrl: './multi-select.component.html',
  styleUrls: ['./multi-select.component.css'],
})
export class MultiSelectComponent {
  @Input() options: MultiSelectOption[] = [];
  @Output() selectionChange = new EventEmitter<MultiSelectOption[]>();

  selectedOptions: MultiSelectOption[] = [];

  toggleSelection(option: MultiSelectOption): void {
    option.selected = !option.selected;

    if (option.selected) {
      this.selectedOptions.push(option);
    } else {
      this.selectedOptions = this.selectedOptions.filter(
        (item) => item.id !== option.id
      );
    }

    this.emitSelectionChange();
  }

  selectAll(): void {
    this.options.forEach((option) => (option.selected = true));
    this.selectedOptions = [...this.options];
    this.emitSelectionChange();
  }

  deselectAll(): void {
    this.options.forEach((option) => (option.selected = false));
    this.selectedOptions = [];
    this.emitSelectionChange();
  }

  emitSelectionChange(): void {
    this.selectionChange.emit(this.selectedOptions);
  }
}





import { Component, OnInit } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { MultiSelectOption } from './multi-select/multi-select.component';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-filters-panel',
  standalone: true,
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
  imports: [HttpClientModule, FormsModule],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  selectedRegulations: MultiSelectOption[] = [];
  selectedDate: string;

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));
    });
  }

  onRegulationSelectionChange(selectedOptions: MultiSelectOption[]): void {
    this.selectedRegulations = selectedOptions;
    // Trigger search automatically after selection change
    this.searchFilters();
  }

  searchFilters(): void {
    console.log('Selected regulations:', this.selectedRegulations);
    console.log('Selected date:', this.selectedDate);
  }

  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedDate = '';
    this.regulations.forEach((option) => (option.selected = false));
  }
}







<div class="filter-container">
  <app-multi-select
    [options]="regulations"
    (selectionChange)="onRegulationSelectionChange($event)"
  ></app-multi-select>

  <label for="date">Select Date:</label>
  <input type="date" id="date" [(ngModel)]="selectedDate" />
</div>

<div class="actions-container">
  <button (click)="searchFilters()">Search</button>
  <button (click)="resetFilters()">Reset</button>
</div>





<div class="multi-select-container">
  <div class="select-all-toggle">
    <label>
      <input type="checkbox" (change)="selectAll()" /> Select All
    </label>
    <label>
      <input type="checkbox" (change)="deselectAll()" /> Deselect All
    </label>
  </div>

  <div class="options-list">
    <div *ngFor="let option of options" class="option-item">
      <label>
        <input
          type="checkbox"
          [checked]="option.selected"
          (change)="toggleSelection(option)"
        />
        {{ option.displayName }}
      </label>
    </div>
  </div>
</div>
















import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options'; // Assuming you have this interface

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];
  
  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];
  
  selectedDate: string = ''; // New property for the date
  searchResults: any[] = []; // To store the search results

  private jsonUrlFilters = 'assets/mock-data/response/json1_filters.json';
  private jsonUrlData = 'assets/mock-data/response/json2_fieldFlattenData.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrlFilters).subscribe((data) => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableDatasets = data.data.reportableDatasets.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.reportableFields = data.data.reportableFields.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false,
      }));
    });
  }

  searchFilters(): void {
    // Fetch the second JSON and filter based on selected regulations
    this.http.get<any>(this.jsonUrlData).subscribe((data) => {
      this.searchResults = data.filter((item: any) => 
        this.selectedRegulations.some(reg => reg.name === item.regulationName)
      );
      console.log('Search Results:', this.searchResults);
    });
  }

  resetFilters(): void {
    this.selectedRegulations = [];
    this.selectedReportableDatasets = [];
    this.selectedReportableFields = [];
    this.selectedAssetClasses = [];
    this.selectedProductType = [];
    this.selectedDate = ''; // Reset date
    // Reset the selected state in the options array too
    this.regulations.forEach((option) => (option.selected = false));
    this.reportableDatasets.forEach((option) => (option.selected = false));
    this.reportableFields.forEach((option) => (option.selected = false));
    this.assetClasses.forEach((option) => (option.selected = false));
    this.productType.forEach((option) => (option.selected = false));
    this.searchResults = []; // Clear search results
  }

  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}
