@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Parse form data
    asset_class = request.form['assetClass']
    jurisdiction = request.form['jurisdiction']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']
    
    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template_string(
            HTML_TEMPLATE,
            asset_classes=["FX", "IR", "EQ", "Co", "CD"],
            jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
            recon_types=["COMP", "POS"],
            response="Invalid Date Format. Please use YYYY-MM-DD.",
            file_paths=[]
        )
    
    response = ""
    try:
        if flow_type.lower() == "onereg":
            result = subprocess.run(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction} {recon_type} {recon_date_formatted}",
                shell=True,
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                response = f"Request Processed Successfully: OneReg Loading\n{result.stdout}"
            else:
                response = f"Request Failed:\n{result.stderr}"
        elif flow_type.lower() == "file":
            result = subprocess.run(
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction} {recon_type} {recon_date_formatted}",
                shell=True,
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                response = f"Request Processed Successfully: File Loading\n{result.stdout}"
            else:
                response = f"Request Failed:\n{result.stderr}"
        else:
            response = "Request Failed: Invalid Flow Type"
    except Exception as e:
        response = f"An unexpected error occurred: {str(e)}"
    
    enow = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Ended :: {enow.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # List files in all asset class directories
    asset_classes = ["FX", "IR", "EQ", "Co", "CD"]
    file_paths = []
    for asset_class in asset_classes:
        for recon_type in ["cmp", "posval"]:
            jurisdiction_shortform = JURISDICTION_SHORTFORMS.get(jurisdiction, "na")
            subdir = f"dtcc_{asset_class.lower()}_{jurisdiction_shortform}_{recon_type}"
            directory = os.path.join(BASE_DIR, asset_class, "data", subdir)
            if os.path.exists(directory):
                files = os.listdir(directory)
                for file in files:
                    # Store relative directory path for download link
                    relative_path = os.path.relpath(directory, BASE_DIR)
                    file_paths.append((file, relative_path))
    
    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=["FX", "IR", "EQ", "Co", "CD"],
        jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA", "DSMATCH"],
        recon_types=["COMP", "POS"],
        response=response,
        file_paths=file_paths
    )
