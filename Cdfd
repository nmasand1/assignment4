import subprocess
from flask import Flask, request, render_template_string, send_from_directory
import datetime
import os

app = Flask(__name__)

BASE_DIR = "/apps/TTR/prod/OneReg/OneRegReconciler/recondataloader"

JURISDICTION_SHORTFORMS = {
    "JFSA": "na",
    "CANADA": "canada",
    "CFTC": "cftc",
    "SEC": "sec",
    "HKMA": "hkma",
    "ESMA": "esma",
    "HKTR": "hktr",
    "FCA": "fca",
    "MAS": "mas",
    "ASIC": "asic",
}

HTML_TEMPLATE = '''<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recon Automation Framework</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f9;
        }

        h1 {
            text-align: center;
            color: #4CAF50;
        }

        h2 {
            color: #333;
        }

        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: 0 auto;
        }

        label {
            font-weight: bold;
            display: block;
            margin-bottom: 6px;
            color: #333;
        }

        select, input[type="date"] {
            width: 100%;
            padding: 10px;
            margin: 8px 0;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            font-size: 16px;
        }

        input[type="submit"]:hover {
            background-color: #45a049;
        }

        .response, .file-list {
            margin-top: 20px;
            padding: 15px;
            background-color: #fff;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            max-width: 600px;
            margin: 20px auto;
        }

        .file-list ul {
            list-style-type: none;
            padding: 0;
        }

        .file-list li {
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }

        .file-list li a {
            color: #4CAF50;
            text-decoration: none;
        }

        .file-list li a:hover {
            text-decoration: underline;
        }

        .response p {
            font-size: 16px;
            color: #333;
        }

        .output {
            margin-top: 20px;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: 8px;
            font-family: monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <h1>Recon Automation Framework</h1>
    <form action="/recon" method="POST">
        <label for="assetClass">Asset Class: </label>
        <select id="assetClass" name="assetClass" required>
            {% for asset_class in asset_classes %}
                <option value="{{ asset_class }}">{{ asset_class }}</option>
            {% endfor %}
        </select>

        <label for="reconType">Recon Type: </label>
        <select id="reconType" name="reconType" required>
            {% for recon_type in recon_types %}
                <option value="{{ recon_type }}">{{ recon_type }}</option>
            {% endfor %}
        </select>

        <label for="reconDate">Recon Date: </label>
        <input type="date" id="reconDate" name="reconDate" required>

        <label for="flowType">Flow Type: </label>
        <select id="flowType" name="flowType" required>
            <option value="file">File</option>
            <option value="onereg">OneReg</option>
        </select>

        <label for="jurisdiction">Jurisdiction: </label>
        <select id="jurisdiction" name="jurisdiction" required>
            {% for jurisdiction in jurisdictions %}
                <option value="{{ jurisdiction }}">{{ jurisdiction }}</option>
            {% endfor %}
        </select>

        <input type="submit" value="Submit">
    </form>

    <div class="response">
        <h2>Response: </h2>
        <p>{{ response|safe }}</p>
    </div>

    <div class="output">
        <h2>Command: </h2>
        <pre>{{ command|safe }}</pre>
        <h2>Execution Output: </h2>
        <pre>{{ command_output|safe }}</pre>
    </div>

    <div class="file-list">
        <h2>Generated Files: </h2>
        {% if file_paths %}
            <ul>
                {% for file, path in file_paths %}
                    <li><strong>{{ file }}</strong>: <a href="/download/{{ path }}" download>{{ file }}</a></li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No files generated yet.</p>
        {% endif %}
    </div>
</body>
</html>
'''

@app.route('/', methods=['GET'])
def home():
    asset_classes = ['FX', 'IR', 'EQ', 'Co', 'CD', 'TRAX']
    jurisdictions = list(JURISDICTION_SHORTFORMS.keys())
    recon_types = ["COMP", "POS"]
    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=asset_classes, 
        jurisdictions=jurisdictions, 
        recon_types=recon_types,
        response="", 
        file_paths=[],
        command_output="",
        command=""
    )

@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    asset_class = request.form['assetClass']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']
    jurisdiction = request.form['jurisdiction']  # Getting jurisdiction as a single value

    # Format jurisdiction as a string
    jurisdiction_str = JURISDICTION_SHORTFORMS.get(jurisdiction.upper(), "na")

    # Format recon_date
    recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%d-%b-%Y')

    # Construct the shell command based on flow_type
    if flow_type.lower() == "onereg":
        cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
    elif flow_type.lower() == "file":
        cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"

    # Capture the shell command output
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    command_output = stdout.decode('utf-8') + "\n" + stderr.decode('utf-8')

    print(f"Command: {cmd}")
    print(f"Command Output: {command_output}")

    # Perform necessary actions here (e.g., file generation or processing)
    file_paths = []
    # Logic for handling generated files (if any)
    
    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=["FX", "IR", "EQ", "Co", "CD", "TRAX"],
        jurisdictions=["JFSA", "CANADA", "MAS", "HKMA", "HKTR", "ESMA", "CFTC", "ASIC", "SEC", "FCA"],
        recon_types=["COMP", "POS"],
        response="Recon completed successfully.",
        file_paths=file_paths,
        command=cmd,
        command_output=command_output
    )

@app.route('/download/<filename>')
def download_file(filename):
    return send_from_directory(BASE_DIR, filename, as_attachment=True)

if __name__ == "__main__":
    app.run(debug=True)
