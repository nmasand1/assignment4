@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    asset_class = request.form['assetClass']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Determine jurisdictions based on asset class and flow type
    if asset_class == "TRAX":
        if flow_type == "file":
            jurisdictions = ["TRAX"]  # Fixed to TRAX for flowType = file
        elif flow_type == "onereg":
            jurisdiction = request.form['jurisdiction']  # Single select dropdown for TRAX jurisdictions
            if jurisdiction not in TRAX_JURISDICTIONS:
                return render_template(
                    'home.html',
                    asset_classes=['FX', 'IR', 'EQ', 'CO', 'CD', 'TRAX'],
                    jurisdictions=TRAX_JURISDICTIONS,
                    recon_types=['COMP', 'POS'],
                    response="Please select a valid TRAX jurisdiction.",
                    file_paths=[]
                )
            jurisdictions = [jurisdiction]  # Ensure single selection
        else:
            jurisdictions = [request.form['jurisdiction']]
    else:
        jurisdictions = request.form.getlist('jurisdiction') if flow_type == "onereg" else [request.form['jurisdiction']]

    # Ensure JFSA is excluded for onereg flow type
    if flow_type == "onereg":
        jurisdictions = [j for j in jurisdictions if j != "JFSA"]

    # Validate jurisdictions
    invalid_jurisdictions = [j for j in jurisdictions if j not in JURISDICTION_SHORTFORMS and j not in TRAX_JURISDICTIONS]
    if invalid_jurisdictions:
        return render_template(
            'home.html',
            asset_classes=['FX', 'IR', 'EQ', 'CO', 'CD', 'TRAX'],
            jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
            recon_types=['COMP', 'POS'],
            response=f"Invalid Jurisdictions: {', '.join(invalid_jurisdictions)}",
            file_paths=[]
        )

    # Construct jurisdiction argument string
    jurisdiction_str = ",".join(jurisdictions)

    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template(
            'home.html',
            asset_classes=['FX', 'IR', 'EQ', 'CO', 'CD', 'TRAX'],
            jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
            recon_types=['COMP', 'POS'],
            response="Invalid Date Format. Please use YYYY-MM-DD.",
            file_paths=[]
        )

    try:
        if flow_type.lower() == "onereg":
            cmd = (
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/"
                f"loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
            )
        elif flow_type.lower() == "file":
            cmd = (
                f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/"
                f"loadFileData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
            )
        else:
            return render_template(
                'home.html',
                asset_classes=['FX', 'IR', 'EQ', 'CO', 'CD', 'TRAX'],
                jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
                recon_types=['COMP', 'POS'],
                response="Invalid Flow Type",
                file_paths=[]
            )

        # Debugging: Print the command
        print(f"Executing command: {cmd}")

        result = subprocess.run(cmd, shell=True, text=True, capture_output=True)
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output} \n{command_error}".strip()

        if 'connection refused' in full_output.lower() or 'failed to connect' in full_output.lower():
            response = "Request Failed (Error Code: {}):<br>{}".format(result.returncode, full_output.replace('\n', '<br>'))
        elif result.returncode == 0:
            response = "Request Processed Successfully:<br>{}".format(full_output.replace('\n', '<br>'))
        else:
            response = "Request Failed (Error Code: {}):<br>{}".format(result.returncode, full_output.replace('\n', '<br>'))

        print(f"Command Output: \n{command_output}")
        print(f"Command Error: \n{command_error}")
        return render_template(
            'home.html',
            asset_classes=['FX', 'IR', 'EQ', 'CO', 'CD', 'TRAX'],
            jurisdictions=(TRAX_JURISDICTIONS if asset_class == "TRAX" and flow_type == "onereg" else ["TRAX"] if asset_class == "TRAX" and flow_type == "file" else list(JURISDICTION_SHORTFORMS.keys())),
            recon_types=['COMP', 'POS'],
            response=response,
            file_paths=[]
        )
    except Exception as e:
        print(f"Error: {e}")
        return render_template(
            'home.html',
            asset_classes=['FX', 'IR', 'EQ', 'CO', 'CD', 'TRAX'],
            jurisdictions=(TRAX_JURISDICTIONS if asset_class == "TRAX" and flow_type == "onereg" else ["TRAX"] if asset_class == "TRAX" and flow_type == "file" else list(JURISDICTION_SHORTFORMS.keys())),
            recon_types=['COMP', 'POS'],
            response=str(e),
            file_paths=[]
        )
