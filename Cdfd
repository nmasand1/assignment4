from flask import Flask, request, render_template_string, send_from_directory
import subprocess
import datetime
import os

app = Flask(__name__)

# Base path for the directories
BASE_DIR = "/apps/TTR/prod/OneReg/OneRegReconciler/recondataloader"

# Jurisdiction shortform mapping
JURISDICTION_SHORTFORMS = {
    "JFSA": "na",
    "CANADA": "canada",
    "CFTC": "cftc",
    "SEC": "sec",
    "HKMA": "hkma",
    "ESMA": "esma",
    "HKTR": "hktr",
    "FCA": "fca",
    "MAS": "mas",
    "ASIC": "asic",
}

# TRAX Jurisdictions for the specific case of TRAX asset class and onereg flow type
TRAX_JURISDICTIONS = ['TRAXCASH', 'TRAXNONCASH', 'TRAXNONCASHOTC']

HTML_TEMPLATE = '''<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recon Automation Framework</title>
    <style>
        /* Style for the body */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f9;
        }

        h1 {
            text-align: center;
            color: #4CAF50;
        }

        h2 {
            color: #333;
        }

        /* Form container */
        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: 0 auto;
        }

        label {
            font-weight: bold;
            display: block;
            margin-bottom: 6px;
            color: #333;
        }

        select, input[type="date"] {
            width: 100%;
            padding: 10px;
            margin: 8px 0;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        select:focus, input[type="date"]:focus {
            border-color: #4CAF50;
            outline: none;
        }

        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            font-size: 16px;
        }

        input[type="submit"]:hover {
            background-color: #45a049;
        }

        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
        }

        .checkbox-group label {
            margin-right: 15px;
            margin-bottom: 10px;
        }

        .response, .file-list {
            margin-top: 20px;
            padding: 15px;
            background-color: #fff;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            max-width: 600px;
            margin: 20px auto;
        }

        .file-list ul {
            list-style-type: none;
            padding: 0;
        }

        .file-list li {
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }

        .file-list li a {
            color: #4CAF50;
            text-decoration: none;
        }

        .file-list li a:hover {
            text-decoration: underline;
        }

        .response p {
            font-size: 16px;
            color: #333;
        }
    </style>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const flowTypeSelect = document.getElementById("flowType");
            const jurisdictionSelect = document.getElementById("jurisdiction");
            const jurisdictionCheckboxContainer = document.getElementById("jurisdiction-checkbox-container");
            const traxJurisdictionSelect = document.getElementById("traxJurisdiction");

            flowTypeSelect.addEventListener("change", () => {
                if (flowTypeSelect.value === "onereg") {
                    jurisdictionSelect.style.display = "none";
                    jurisdictionCheckboxContainer.style.display = "block";
                    if (document.getElementById("assetClass").value === "TRAX") {
                        traxJurisdictionSelect.style.display = "block";
                    } else {
                        traxJurisdictionSelect.style.display = "none";
                    }
                } else {
                    jurisdictionSelect.style.display = "block";
                    jurisdictionCheckboxContainer.style.display = "none";
                    traxJurisdictionSelect.style.display = "none";
                }
            });

            const assetClassSelect = document.getElementById("assetClass");
            assetClassSelect.addEventListener("change", () => {
                if (assetClassSelect.value === "TRAX" && flowTypeSelect.value === "onereg") {
                    traxJurisdictionSelect.style.display = "block";
                } else {
                    traxJurisdictionSelect.style.display = "none";
                }
            });
        });
    </script>
</head>
<body>
    <h1>Recon Automation Framework</h1>
    <form action="/recon" method="POST">
        <label for="assetClass">Asset Class: </label>
        <select id="assetClass" name="assetClass" required>
            {% for asset_class in asset_classes %}
                <option value="{{ asset_class }}">{{ asset_class }}</option>
            {% endfor %}
        </select>

        <label for="reconType">Recon Type: </label>
        <select id="reconType" name="reconType" required>
            {% for recon_type in recon_types %}
                <option value="{{ recon_type }}">{{ recon_type }}</option>
            {% endfor %}
        </select>

        <label for="reconDate">Recon Date: </label>
        <input type="date" id="reconDate" name="reconDate" required>

        <label for="flowType">Flow Type: </label>
        <select id="flowType" name="flowType" required>
            <option value="file">File</option>
            <option value="onereg">OneReg</option>
        </select>

        <!-- Jurisdiction Dropdown -->
        <div id="jurisdiction-dropdown">
            <label for="jurisdiction">Jurisdiction: </label>
            <select id="jurisdiction" name="jurisdiction" required>
                {% for jurisdiction in jurisdictions %}
                    <option value="{{ jurisdiction }}">{{ jurisdiction }}</option>
                {% endfor %}
            </select>
        </div>

        <!-- TRAX Jurisdiction Dropdown -->
        <div id="traxJurisdiction" style="display: none;">
            <label for="traxJurisdiction">Select TRAX Jurisdiction: </label>
            <select id="traxJurisdiction" name="traxJurisdiction" required>
                {% for trax_jurisdiction in trax_jurisdictions %}
                    <option value="{{ trax_jurisdiction }}">{{ trax_jurisdiction }}</option>
                {% endfor %}
            </select>
        </div>

        <!-- Jurisdiction Checkboxes -->
        <div id="jurisdiction-checkbox-container" style="display: none;">
            <label>Jurisdiction:</label>
            <div class="checkbox-group">
                {% for jurisdiction in jurisdictions %}
                    <label>
                        <input type="checkbox" name="jurisdiction" value="{{ jurisdiction }}"> {{ jurisdiction }}
                    </label>
                {% endfor %}
            </div>
        </div>

        <input type="submit" value="Submit">
    </form>

    <div class="response">
        <h2>Response: </h2>
        <p>{{ response|safe }}</p>
    </div>

    <div class="file-list">
        <h2>Generated Files: </h2>
        {% if file_paths %}
            <ul>
                {% for file, path in file_paths %}
                    <li><strong>{{ file }}</strong>: <a href="/download/{{ path }}" download>{{ file }}</a></li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No files generated yet.</p>
        {% endif %}
    </div>
</body>
</html>
'''

@app.route('/', methods=['GET'])
def home():
    asset_classes = ['FX', 'IR', 'EQ', 'Co', 'CD', 'TRAX']
    jurisdictions = list(JURISDICTION_SHORTFORMS.keys())  # All jurisdictions
    trax_jurisdictions = TRAX_JURISDICTIONS  # TRAX specific jurisdictions
    recon_types = ["COMP", "POS"]
    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=asset_classes, 
        jurisdictions=jurisdictions, 
        trax_jurisdictions=trax_jurisdictions,
        recon_types=recon_types,
        response="", 
        file_paths=[]
    )

@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    asset_class = request.form['assetClass']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    # Process multiple jurisdictions
    jurisdictions = request.form.getlist('jurisdiction') if flow_type == "onereg" else [request.form['jurisdiction']]

    # Handle TRAX specific jurisdiction selection
    if asset_class == "TRAX" and flow_type == "onereg":
        trax_jurisdiction = request.form.get('traxJurisdiction')
        jurisdictions = [trax_jurisdiction]

    # Convert Jurisdictions to shortforms
    jurisdiction_shortforms = [JURISDICTION_SHORTFORMS[jur] for jur in jurisdictions]

    # Check if all required parameters are present
    if asset_class and recon_type and recon_date and flow_type and jurisdictions:
        # Running the shell script (add path to your shell script)
        shell_command = f"bash {BASE_DIR}/OneRegReconciler.sh {asset_class} {recon_type} {recon_date} {flow_type} {' '.join(jurisdiction_shortforms)}"
        print(f"Running command: {shell_command}")

        # Execute the shell command and capture output
        process = subprocess.Popen(shell_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()

        if process.returncode == 0:
            print(f"Recon Automation Framework :: Recon Data Loading Completed :: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            response = f"Recon started for asset class {asset_class} with jurisdictions: {', '.join(jurisdictions)}"
            file_paths = [("Recon Files", os.path.join(BASE_DIR, f"{asset_class}_{recon_date}.csv"))]
        else:
            response = f"Error occurred: {stderr.decode()}"
            file_paths = []

    else:
        response = "Missing required fields."

    return render_template_string(
        HTML_TEMPLATE,
        asset_classes=['FX', 'IR', 'EQ', 'Co', 'CD', 'TRAX'],
        jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
        trax_jurisdictions=TRAX_JURISDICTIONS,
        recon_types=["COMP", "POS"],
        response=response,
        file_paths=file_paths
    )

@app.route('/download/<path:filename>')
def download(filename):
    return send_from_directory(BASE_DIR, filename)

if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0',port=8129)
