from flask import Flask, request, render_template, send_from_directory
import subprocess
import datetime
import os

app = Flask(__name__)

# Base path for the directories
BASE_DIR = "/apps/TTR/prod/OneReg/OneRegReconciler/recondataloader"

# Jurisdiction shortform mapping
JURISDICTION_SHORTFORMS = {
    "JFSA": "na",
    "CANADA": "canada",
    "CFTC": "cftc",
    "SEC": "sec",
    "HKMA": "hkma",
    "ESMA": "esma",
    "HKTR": "hktr",
    "FCA": "fca",
    "MAS": "mas",
    "ASIC": "asic",
}

# Jurisdictions for TRAX specific scenario
TRAX_JURISDICTIONS = ["TRAXCASH", "TRAXNONCASH", "TRAXNONCASHOTC"]

@app.route('/', methods=['GET'])
def home():
    asset_classes = ['FX', 'IR', 'EQ', 'CO', 'CD', 'TRAX']  # Added TRAX
    jurisdictions = list(JURISDICTION_SHORTFORMS.keys())  # Default jurisdictions
    recon_types = ["COMP", "POS"]
    return render_template(
        'home.html',
        asset_classes=asset_classes,
        jurisdictions=jurisdictions,
        trax_jurisdictions=TRAX_JURISDICTIONS,  # Pass TRAX jurisdictions
        recon_types=recon_types,
        response="",
        file_paths=[]
    )

@app.route('/recon', methods=['POST'])
def recon():
    now = datetime.datetime.now()
    print(f"Recon Automation Framework :: Recon Data Loading Started :: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    asset_class = request.form['assetClass']
    recon_type = request.form['reconType']
    recon_date = request.form['reconDate']
    flow_type = request.form['flowType']

    jurisdictions = []
    if flow_type == "onereg":
        if asset_class == "TRAX":
            jurisdictions = [request.form['traxJurisdiction']]  # Only TRAX-specific jurisdiction
        else:
            jurisdictions = request.form.getlist('jurisdiction')  # Default jurisdictions
        if 'JFSA' in jurisdictions:
            jurisdictions.remove('JFSA')
    else:
        jurisdictions = [request.form['jurisdiction']]

    jurisdiction_str = ",".join(jurisdictions)

    try:
        recon_date_formatted = datetime.datetime.strptime(recon_date, '%Y-%m-%d').strftime('%y%m%d')
    except ValueError:
        return render_template(
            'home.html',
            asset_classes=["FX", "IR", "EQ", "CO", "CD", "TRAX"],  # Updated here as well
            jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
            trax_jurisdictions=TRAX_JURISDICTIONS,
            recon_types=["COMP", "POS"],
            response="Invalid Date Format. Please use YYYY-MM-DD.",
            file_paths=[]
        )

    try:
        if flow_type.lower() == "onereg":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadOneRegData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        elif flow_type.lower() == "file":
            cmd = f"sh /apps/TTR/uat2/OneReg/OneRegReconciler/UnixScript/Recon_Automation/loadFileData.sh {asset_class} {jurisdiction_str} {recon_type} {recon_date_formatted}"
        else:
            return render_template(
                'home.html',
                asset_classes=["FX", "IR", "EQ", "CO", "CD", "TRAX"],  # Updated here as well
                jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
                trax_jurisdictions=TRAX_JURISDICTIONS,
                recon_types=["COMP", "POS"],
                response="Invalid Flow Type",
                file_paths=[]
            )

        result = subprocess.run(cmd, shell=True, text=True, capture_output=True)
        command_output = result.stdout.strip()
        command_error = result.stderr.strip()
        full_output = f"{command_output} \n{command_error}".strip()

        if 'connection refused' in full_output.lower() or 'failed to connect' in full_output.lower():
            response = "Request Failed (Error Code: {}):<br>{}".format(result.returncode, full_output.replace('\n','<br>'))
        elif result.returncode == 0:
            response = "Request Processed Successfully:<br>{}".format(full_output.replace('\n', '<br>'))
        else:
            response = "Request Failed (Error Code: {}):<br>{}".format(result.returncode, full_output.replace('\n','<br>'))

        print(f"Command Output: \n{command_output}")
        print(f"Command Error: \n{command_error}")
        return render_template(
            'home.html',
            asset_classes=["FX", "IR", "EQ", "CO", "CD", "TRAX"],  # Updated here as well
            jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
            trax_jurisdictions=TRAX_JURISDICTIONS,
            recon_types=["COMP", "POS"],
            response=response,
            file_paths=[]
        )
    except Exception as e:
        print(f"Error: {e}")
        return render_template(
            'home.html',
            asset_classes=["FX", "IR", "EQ", "CO", "CD", "TRAX"],  # Updated here as well
            jurisdictions=list(JURISDICTION_SHORTFORMS.keys()),
            trax_jurisdictions=TRAX_JURISDICTIONS,
            recon_types=["COMP", "POS"],
            response=str(e),
            file_paths=[]
        )

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8129)






<!-- Add TRAX-specific jurisdictions -->
<div id="trax-jurisdictions" style="display: none;">
    <label for="traxJurisdiction">TRAX Jurisdiction:</label>
    <select id="traxJurisdiction" name="traxJurisdiction">
        {% for trax_jurisdiction in trax_jurisdictions %}
            <option value="{{ trax_jurisdiction }}">{{ trax_jurisdiction }}</option>
        {% endfor %}
    </select>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const assetClassSelect = document.getElementById("assetClass");
        const flowTypeSelect = document.getElementById("flowType");
        const jurisdictionSelect = document.getElementById("jurisdiction");
        const jurisdictionCheckboxContainer = document.getElementById("jurisdiction-checkbox-container");
        const traxJurisdictionsDiv = document.getElementById("trax-jurisdictions");

        const toggleJurisdictionInputs = () => {
            if (flowTypeSelect.value === "onereg") {
                if (assetClassSelect.value === "TRAX") {
                    jurisdictionSelect.style.display = "none";
                    jurisdictionCheckboxContainer.style.display = "none";
                    traxJurisdictionsDiv.style.display = "block";
                } else {
                    jurisdictionSelect.style.display = "none";
                    jurisdictionCheckboxContainer.style.display = "block";
                    traxJurisdictionsDiv.style.display = "none";
                }
            } else {
                jurisdictionSelect.style.display = "block";
                jurisdictionCheckboxContainer.style.display = "none";
                traxJurisdictionsDiv.style.display = "none";
            }
        };

        assetClassSelect.addEventListener("change", toggleJurisdictionInputs);
        flowTypeSelect.addEventListener("change", toggleJurisdictionInputs);

        toggleJurisdictionInputs(); // Initialize on page load
    });
</script>
