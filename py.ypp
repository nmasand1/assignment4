import pandas as pd
from lxml import etree

def strip_namespaces(xml_string):
    """Remove namespaces from the XML string."""
    parser = etree.XMLParser(ns_clean=True, recover=True, encoding='utf-8')
    tree = etree.fromstring(xml_string.encode('utf-8'), parser=parser)
    for elem in tree.iter():
        if elem.tag.startswith('{'):
            elem.tag = elem.tag.split('}', 1)[1]  # Strip namespace
    return tree

def extract_trade_data(node):
    """Extract tradeId and alternateId along with their attributes."""
    trade_data = {}

    # Extract the tradeId, its text and attributes
    trade_id = node.find(".//tradeId")
    if trade_id is not None:
        trade_data['tradeId'] = trade_id.text.strip() if trade_id.text else None
        for attr_name, attr_value in trade_id.attrib.items():
            trade_data[f"tradeId_{attr_name}"] = attr_value

    # Extract the alternateId, its text and attributes
    alternate_id = node.find(".//alternateId")
    if alternate_id is not None:
        trade_data['alternateId'] = alternate_id.text.strip() if alternate_id.text else None
        for attr_name, attr_value in alternate_id.attrib.items():
            trade_data[f"alternateId_{attr_name}"] = attr_value

    return trade_data

def extract_data(xml_string, xpath):
    """Extract tradeId and alternateId with attributes based on the given XPath."""
    try:
        # Parse XML and remove namespaces
        root = strip_namespaces(xml_string)

        # Find the nodes based on the provided XPath
        nodes = root.xpath(xpath)

        # List to store extracted data
        extracted_data = []

        # Iterate over nodes to extract trade-related data
        for node in nodes:
            data = extract_trade_data(node)
            extracted_data.append(data)

        return extracted_data

    except Exception as e:
        print(f"Error processing XML: {e}")
        return []

def main():
    # Path to the CSV file containing XML data
    csv_file_path = "bcml_data.csv"  # Change to your actual CSV file path
    # Column in the CSV file that contains the XML strings
    xml_column = 'bcml'  # Change this to the name of your XML column
    # Dynamic XPath provided by the user
    xpath = input("Enter the XPath to extract (e.g., .//trade): ")  # Example: ".//trade"

    # Read the CSV file
    df = pd.read_csv(csv_file_path)

    # List to store all extracted data from the entire file
    all_extracted_data = []

    # Process each row and extract data based on the provided XPath
    for index, row in df.iterrows():
        xml_string = row[xml_column]
        extracted_values = extract_data(xml_string, xpath)

        # Add the row index for reference
        for value in extracted_values:
            value['row_index'] = index

        # Append extracted values to the main list
        all_extracted_data.extend(extracted_values)

    # Convert extracted data into a DataFrame
    if all_extracted_data:
        results_df = pd.DataFrame(all_extracted_data)
    else:
        results_df = pd.DataFrame(columns=["No Data Found"])

    # Output the results to a CSV file
    output_file = "extracted_values_output.csv"
    results_df.to_csv(output_file, index=False)
    print(f"Extracted data saved to {output_file}")

if __name__ == "__main__":
    main()
