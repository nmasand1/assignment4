import { Component, Input, Output, EventEmitter } from '@angular/core';
import { MultiSelectOption } from 'src/app/models/multi-select-options';

@Component({
  selector: 'app-multi-select',
  templateUrl: './multi-select.component.html',
  styleUrls: ['./multi-select.component.css']
})
export class MultiSelectComponent {
  @Input() options: MultiSelectOption[] = [];
  @Input() label: string = '';
  @Input() isOpen: boolean = false;
  @Output() selectionChange: EventEmitter<MultiSelectOption[]> = new EventEmitter<MultiSelectOption[]>();

  toggleDropdown(): void {
    this.isOpen = !this.isOpen;
  }

  selectAll(event: Event): void {
    const checked = (event.target as HTMLInputElement).checked;
    this.options.forEach(option => {
      option.selected = checked;
    });
    this.emitSelection();
  }

  toggleSelection(option: MultiSelectOption): void {
    option.selected = !option.selected;
    this.emitSelection();
  }

  private emitSelection(): void {
    const selectedOptions = this.options.filter(option => option.selected);
    this.selectionChange.emit(selectedOptions);
  }
}






<div class="multi-select">
  <div class="dropdown-label" (click)="toggleDropdown()">
    {{ label }}
    <span class="dropdown-arrow">{{ isOpen ? '▲' : '▼' }}</span>
  </div>
  <div *ngIf="isOpen" class="dropdown-content">
    <div class="select-all">
      <input type="checkbox" (change)="selectAll($event)" /> Select All
    </div>
    <div *ngFor="let option of options" class="dropdown-item">
      <input type="checkbox" [(ngModel)]="option.selected" (change)="toggleSelection(option)" />
      {{ option.displayName }}
    </div>
  </div>
</div>






import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options';

@Component({
  selector: 'app-filters-panel',
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css']
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe(data => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.reportableDatasets = data.data.reportableDataset.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.reportableFields = data.data.reportableField.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));
    });
  }

  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}




<div class="filters-panel">
  <h2>Filters Panel</h2>

  <!-- Regulations Dropdown -->
  <app-multi-select
    [options]="regulations"
    [label]="'Regulations'"
    (selectionChange)="onRegulationsChange($event)"
  ></app-multi-select>

  <!-- Reportable Datasets Dropdown -->
  <app-multi-select
    [options]="reportableDatasets"
    [label]="'Reportable Datasets'"
    (selectionChange)="onReportableDatasetsChange($event)"
  ></app-multi-select>

  <!-- Reportable Fields Dropdown -->
  <app-multi-select
    [options]="reportableFields"
    [label]="'Reportable Fields'"
    (selectionChange)="onReportableFieldsChange($event)"
  ></app-multi-select>

  <!-- Asset Classes Dropdown -->
  <app-multi-select
    [options]="assetClasses"
    [label]="'Asset Classes'"
    (selectionChange)="onAssetClassesChange($event)"
  ></app-multi-select>

  <!-- Product Type Dropdown -->
  <app-multi-select
    [options]="productType"
    [label]="'Product Type'"
    (selectionChange)="onProductTypeChange($event)"
  ></app-multi-select>
</div>
