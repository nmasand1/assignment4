import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FilterOption } from './filters-options.interface';
import { MultiSelectOption } from './multi-select-options.interface';

@Component({
  selector: 'app-filters-panel',
  standalone: true,
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
  imports: []
})
export class FiltersPanelComponent implements OnInit {

  regulations: FilterOption[] = [];
  reportableDatasets: FilterOption[] = [];
  reportableFields: FilterOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productTypes: FilterOption[] = [];

  selectedRegulations: FilterOption[] = [];
  selectedReportableDatasets: FilterOption[] = [];
  selectedReportableFields: FilterOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductTypes: FilterOption[] = [];

  // Individual dropdown open/close states
  dropdownStates: { [key: string]: boolean } = {
    regulations: false,
    reportableDatasets: false,
    reportableFields: false,
    assetClasses: false,
    productTypes: false
  };

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe(data => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));

      this.reportableDatasets = data.data.reportableDataset.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));

      this.reportableFields = data.data.reportableField.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.productTypes = data.data.productTypes.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));
    });
  }

  // Toggle dropdown visibility for each dropdown type
  toggleDropdown(dropdown: string): void {
    this.dropdownStates[dropdown] = !this.dropdownStates[dropdown];
  }

  // Select or deselect all options for a dropdown
  selectAll(event: Event, dropdown: string): void {
    const checked = (event.target as HTMLInputElement).checked;
    switch (dropdown) {
      case 'regulations':
        this.regulations.forEach(item => item.selected = checked);
        this.selectedRegulations = checked ? [...this.regulations] : [];
        break;
      case 'reportableDatasets':
        this.reportableDatasets.forEach(item => item.selected = checked);
        this.selectedReportableDatasets = checked ? [...this.reportableDatasets] : [];
        break;
      case 'reportableFields':
        this.reportableFields.forEach(item => item.selected = checked);
        this.selectedReportableFields = checked ? [...this.reportableFields] : [];
        break;
      case 'assetClasses':
        this.assetClasses.forEach(item => item.selected = checked);
        this.selectedAssetClasses = checked ? [...this.assetClasses] : [];
        break;
      case 'productTypes':
        this.productTypes.forEach(item => item.selected = checked);
        this.selectedProductTypes = checked ? [...this.productTypes] : [];
        break;
    }
  }

  // Toggle selection for individual options within a dropdown
  toggleSelection(option: FilterOption | MultiSelectOption, dropdown: string): void {
    option.selected = !option.selected;

    switch (dropdown) {
      case 'regulations':
        this.updateSelectedOptions(option, this.selectedRegulations);
        break;
      case 'reportableDatasets':
        this.updateSelectedOptions(option, this.selectedReportableDatasets);
        break;
      case 'reportableFields':
        this.updateSelectedOptions(option, this.selectedReportableFields);
        break;
      case 'assetClasses':
        this.updateSelectedOptions(option, this.selectedAssetClasses);
        break;
      case 'productTypes':
        this.updateSelectedOptions(option, this.selectedProductTypes);
        break;
    }
  }

  // Helper function to update the selected options list
  updateSelectedOptions(option: FilterOption | MultiSelectOption, selectedList: (FilterOption | MultiSelectOption)[]): void {
    if (option.selected) {
      selectedList.push(option);
    } else {
      const index = selectedList.findIndex(item => item.id === option.id);
      if (index !== -1) {
        selectedList.splice(index, 1);
      }
    }
  }
}



<div class="dropdown-container">

  <!-- Regulations Dropdown -->
  <div class="dropdown">
    <button (click)="toggleDropdown('regulations')">Regulations</button>
    <div *ngIf="dropdownStates['regulations']" class="dropdown-content">
      <label>
        <input type="checkbox" (change)="selectAll($event, 'regulations')" /> Select All
      </label>
      <div *ngFor="let option of regulations">
        <label>
          <input type="checkbox" [(ngModel)]="option.selected" (change)="toggleSelection(option, 'regulations')" />
          {{ option.displayName }}
        </label>
      </div>
    </div>
  </div>

  <!-- Reportable Datasets Dropdown -->
  <div class="dropdown">
    <button (click)="toggleDropdown('reportableDatasets')">Reportable Datasets</button>
    <div *ngIf="dropdownStates['reportableDatasets']" class="dropdown-content">
      <label>
        <input type="checkbox" (change)="selectAll($event, 'reportableDatasets')" /> Select All
      </label>
      <div *ngFor="let option of reportableDatasets">
        <label>
          <input type="checkbox" [(ngModel)]="option.selected" (change)="toggleSelection(option, 'reportableDatasets')" />
          {{ option.displayName }}
        </label>
      </div>
    </div>
  </div>

  <!-- Reportable Fields Dropdown -->
  <div class="dropdown">
    <button (click)="toggleDropdown('reportableFields')">Reportable Fields</button>
    <div *ngIf="dropdownStates['reportableFields']" class="dropdown-content">
      <label>
        <input type="checkbox" (change)="selectAll($event, 'reportableFields')" /> Select All
      </label>
      <div *ngFor="let option of reportableFields">
        <label>
          <input type="checkbox" [(ngModel)]="option.selected" (change)="toggleSelection(option, 'reportableFields')" />
          {{ option.displayName }}
        </label>
      </div>
    </div>
  </div>

  <!-- Asset Classes Dropdown -->
  <div class="dropdown">
    <button (click)="toggleDropdown('assetClasses')">Asset Classes</button>
    <div *ngIf="dropdownStates['assetClasses']" class="dropdown-content">
      <label>
        <input type="checkbox" (change)="selectAll($event, 'assetClasses')" /> Select All
      </label>
      <div *ngFor="let option of assetClasses">
        <label>
          <input type="checkbox" [(ngModel)]="option.selected" (change)="toggleSelection(option, 'assetClasses')" />
          {{ option.displayName }}
        </label>
      </div>
    </div>
  </div>

  <!-- Product Types Dropdown -->
  <div class="dropdown">
    <button (click)="toggleDropdown('productTypes')">Product Types</button>
    <div *ngIf="dropdownStates['productTypes']" class="dropdown-content">
      <label>
        <input type="checkbox" (change)="selectAll($event, 'productTypes')" /> Select All
      </label>
      <div *ngFor="let option of productTypes">
        <label>
          <input type="checkbox" [(ngModel)]="option.selected" (change)="toggleSelection(option, 'productTypes')" />
          {{ option.displayName }}
        </label>
      </div>
    </div>
  </div>

</div>
