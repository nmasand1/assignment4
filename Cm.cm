import { Component, Input, Output, EventEmitter } from '@angular/core';
import { MultiSelectOption } from 'src/app/models/multi-select-options';

@Component({
  selector: 'app-multi-select',
  templateUrl: './multi-select.component.html',
  styleUrls: ['./multi-select.component.css']
})
export class MultiSelectComponent {
  @Input() options: MultiSelectOption[] = [];
  @Input() dropdownLabel: string = '';
  @Output() selectedChange = new EventEmitter<MultiSelectOption[]>();

  isDropdownOpen = false;
  selectedOptions: MultiSelectOption[] = [];

  toggleDropdown(): void {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  toggleSelection(option: MultiSelectOption): void {
    option.selected = !option.selected;
    if (option.selected) {
      this.selectedOptions.push(option);
    } else {
      this.selectedOptions = this.selectedOptions.filter(item => item.id !== option.id);
    }
    this.selectedChange.emit(this.selectedOptions);
  }

  selectAll(event: Event): void {
    const checked = (event.target as HTMLInputElement).checked;
    this.options.forEach(option => {
      option.selected = checked;
    });
    this.selectedOptions = checked ? [...this.options] : [];
    this.selectedChange.emit(this.selectedOptions);
  }
}


<div class="multi-select">
  <div class="dropdown-label" (click)="toggleDropdown()">
    {{ dropdownLabel }} <span *ngIf="isDropdownOpen">▲</span><span *ngIf="!isDropdownOpen">▼</span>
  </div>

  <div *ngIf="isDropdownOpen" class="dropdown-menu">
    <label>
      <input type="checkbox" (change)="selectAll($event)" />
      Select All
    </label>
    <ul>
      <li *ngFor="let option of options">
        <label>
          <input type="checkbox" [(ngModel)]="option.selected" (change)="toggleSelection(option)" />
          {{ option.displayName }}
        </label>
      </li>
    </ul>
  </div>
</div>



import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MultiSelectOption } from 'src/app/models/multi-select-options';
import { MultiSelectComponent } from '../multi-select/multi-select.component'; // Import the MultiSelectComponent

@Component({
  selector: 'app-filters-panel',
  standalone: true,
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
  imports: [MultiSelectComponent] // Directly import MultiSelectComponent
})
export class FiltersPanelComponent implements OnInit {
  regulations: MultiSelectOption[] = [];
  reportableDatasets: MultiSelectOption[] = [];
  reportableFields: MultiSelectOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productType: MultiSelectOption[] = [];

  selectedRegulations: MultiSelectOption[] = [];
  selectedReportableDatasets: MultiSelectOption[] = [];
  selectedReportableFields: MultiSelectOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductType: MultiSelectOption[] = [];

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe(data => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.reportableDatasets = data.data.reportableDataset.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.reportableFields = data.data.reportableField.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.productType = data.data.productType.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));
    });
  }

  onRegulationsChange(selected: MultiSelectOption[]): void {
    this.selectedRegulations = selected;
  }

  onReportableDatasetsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableDatasets = selected;
  }

  onReportableFieldsChange(selected: MultiSelectOption[]): void {
    this.selectedReportableFields = selected;
  }

  onAssetClassesChange(selected: MultiSelectOption[]): void {
    this.selectedAssetClasses = selected;
  }

  onProductTypeChange(selected: MultiSelectOption[]): void {
    this.selectedProductType = selected;
  }
}



<div class="filters-panel">
  <h2>Filters Panel</h2>

  <!-- Regulations Dropdown -->
  <app-multi-select
    [options]="regulations"
    [dropdownLabel]="'Regulations'"
    (selectedChange)="onRegulationsChange($event)"
  ></app-multi-select>

  <!-- Reportable Datasets Dropdown -->
  <app-multi-select
    [options]="reportableDatasets"
    [dropdownLabel]="'Reportable Datasets'"
    (selectedChange)="onReportableDatasetsChange($event)"
  ></app-multi-select>

  <!-- Reportable Fields Dropdown -->
  <app-multi-select
    [options]="reportableFields"
    [dropdownLabel]="'Reportable Fields'"
    (selectedChange)="onReportableFieldsChange($event)"
  ></app-multi-select>

  <!-- Asset Classes Dropdown -->
  <app-multi-select
    [options]="assetClasses"
    [dropdownLabel]="'Asset Classes'"
    (selectedChange)="onAssetClassesChange($event)"
  ></app-multi-select>

  <!-- Product Type Dropdown -->
  <app-multi-select
    [options]="productType"
    [dropdownLabel]="'Product Type'"
    (selectedChange)="onProductTypeChange($event)"
  ></app-multi-select>
</div>
