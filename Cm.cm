import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FilterOption } from './filters-options.interface';
import { MultiSelectOption } from './multi-select-options.interface';

@Component({
  selector: 'app-filters-panel',
  standalone: true,
  templateUrl: './filters-panel.component.html',
  styleUrls: ['./filters-panel.component.css'],
  imports: []
})
export class FiltersPanelComponent implements OnInit {
  regulations: FilterOption[] = [];
  reportableDatasets: FilterOption[] = [];
  reportableFields: FilterOption[] = [];
  assetClasses: MultiSelectOption[] = [];
  productTypes: FilterOption[] = [];

  selectedRegulations: FilterOption[] = [];
  selectedReportableDatasets: FilterOption[] = [];
  selectedReportableFields: FilterOption[] = [];
  selectedAssetClasses: MultiSelectOption[] = [];
  selectedProductTypes: FilterOption[] = [];

  dropdownStates: { [key: string]: boolean } = {
    regulations: false,
    reportableDatasets: false,
    reportableFields: false,
    assetClasses: false,
    productTypes: false
  };

  private jsonUrl = 'assets/mock-data/response/json1_filters.json';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFiltersData();
  }

  loadFiltersData(): void {
    this.http.get<any>(this.jsonUrl).subscribe(data => {
      this.regulations = data.data.regulations.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));

      this.reportableDatasets = data.data.reportableDataset.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));

      this.reportableFields = data.data.reportableField.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));

      this.assetClasses = data.data.assetClasses.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        selected: false
      }));

      this.productTypes = data.data.productTypes.map((item: any) => ({
        id: item.id,
        name: item.name,
        displayName: item.displayName,
        value: item.value,
        selected: false
      }));
    });
  }

  // Toggle dropdown visibility
  toggleDropdown(dropdown: string): void {
    this.dropdownStates[dropdown] = !this.dropdownStates[dropdown];
  }

  // Select or deselect all options for a dropdown
  selectAll(event: Event, dropdown: string): void {
    const checked = (event.target as HTMLInputElement).checked;

    switch (dropdown) {
      case 'regulations':
        this.regulations.forEach(option => option.selected = checked);
        this.selectedRegulations = checked ? [...this.regulations] : [];
        break;
      case 'reportableDatasets':
        this.reportableDatasets.forEach(option => option.selected = checked);
        this.selectedReportableDatasets = checked ? [...this.reportableDatasets] : [];
        break;
      case 'reportableFields':
        this.reportableFields.forEach(option => option.selected = checked);
        this.selectedReportableFields = checked ? [...this.reportableFields] : [];
        break;
      case 'assetClasses':
        this.assetClasses.forEach(option => option.selected = checked);
        this.selectedAssetClasses = checked ? [...this.assetClasses] : [];
        break;
      case 'productTypes':
        this.productTypes.forEach(option => option.selected = checked);
        this.selectedProductTypes = checked ? [...this.productTypes] : [];
        break;
    }
  }

  // Toggle selection for individual option
  toggleSelection(option: FilterOption | MultiSelectOption, dropdown: string): void {
    option.selected = !option.selected;

    switch (dropdown) {
      case 'regulations':
        this.updateSelectedList(this.selectedRegulations, option);
        break;
      case 'reportableDatasets':
        this.updateSelectedList(this.selectedReportableDatasets, option);
        break;
      case 'reportableFields':
        this.updateSelectedList(this.selectedReportableFields, option);
        break;
      case 'assetClasses':
        this.updateSelectedList(this.selectedAssetClasses, option);
        break;
      case 'productTypes':
        this.updateSelectedList(this.selectedProductTypes, option);
        break;
    }
  }

  // Update the selected list based on the toggled option
  private updateSelectedList(
    selectedList: (FilterOption | MultiSelectOption)[],
    option: FilterOption | MultiSelectOption
  ): void {
    if (option.selected) {
      selectedList.push(option);
    } else {
      const index = selectedList.findIndex(item => item.id === option.id);
      if (index !== -1) {
        selectedList.splice(index, 1);
      }
    }
  }
}



<div class="dropdown">
  <button (click)="toggleDropdown('regulations')">Regulations</button>
  <div *ngIf="dropdownStates['regulations']" class="dropdown-content">
    <label>
      <input type="checkbox" (change)="selectAll($event, 'regulations')" /> Select All
    </label>
    <div *ngFor="let option of regulations">
      <label>
        <input
          type="checkbox"
          [(ngModel)]="option.selected"
          (change)="toggleSelection(option, 'regulations')"
        />
        {{ option.displayName }}
      </label>
    </div>
  </div>
</div>

<!-- Repeat similar block for other dropdowns -->
